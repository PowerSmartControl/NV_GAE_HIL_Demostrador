-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gain_offset_truncation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_I_LCL_1_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_LCL_1_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_LCL_1_c : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_pmsm_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_pmsm_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_pmsm_c : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_dc_bus : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_LCL_2_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_LCL_2_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_I_LCL_2_c : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_grid_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_grid_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_grid_c : IN STD_LOGIC_VECTOR (31 downto 0);
    in_Vp_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_Vp_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_Vp_c : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_fem_a : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_fem_b : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_fem_c : IN STD_LOGIC_VECTOR (31 downto 0);
    CB1_K1_K3_V : IN STD_LOGIC_VECTOR (2 downto 0);
    out_I_LCL_1_a : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_LCL_1_b : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_LCL_1_c : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_pmsm_a : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_pmsm_b : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_pmsm_c : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_dc_bus : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_LCL_2_a : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_LCL_2_b : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_I_LCL_2_c : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_grid_a : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_grid_b : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_grid_c : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_fem_a : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_fem_b : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_fem_c : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of gain_offset_truncation is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gain_offset_truncation,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=968,HLS_SYN_LUT=2194}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_45000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000101000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_40947CAF : STD_LOGIC_VECTOR (31 downto 0) := "01000000100101000111110010101111";
    constant ap_const_lv32_3F82F1AA : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000101111000110101010";
    constant ap_const_lv32_40144135 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000101000100000100110101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_I_LCL_1_a_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_1_a_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_1_a_1_vld_in : STD_LOGIC;
    signal out_I_LCL_1_a_1_ack_in : STD_LOGIC;
    signal out_I_LCL_1_b_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_1_b_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_1_b_1_vld_in : STD_LOGIC;
    signal out_I_LCL_1_b_1_ack_in : STD_LOGIC;
    signal out_I_LCL_1_c_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_1_c_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_1_c_1_vld_in : STD_LOGIC;
    signal out_I_LCL_1_c_1_ack_in : STD_LOGIC;
    signal out_I_pmsm_a_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_pmsm_a_1_vld_reg : STD_LOGIC := '0';
    signal out_I_pmsm_a_1_vld_in : STD_LOGIC;
    signal out_I_pmsm_a_1_ack_in : STD_LOGIC;
    signal out_I_pmsm_b_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_pmsm_b_1_vld_reg : STD_LOGIC := '0';
    signal out_I_pmsm_b_1_vld_in : STD_LOGIC;
    signal out_I_pmsm_b_1_ack_in : STD_LOGIC;
    signal out_I_pmsm_c_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_pmsm_c_1_vld_reg : STD_LOGIC := '0';
    signal out_I_pmsm_c_1_vld_in : STD_LOGIC;
    signal out_I_pmsm_c_1_ack_in : STD_LOGIC;
    signal out_V_dc_bus_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_dc_bus_1_vld_reg : STD_LOGIC := '0';
    signal out_V_dc_bus_1_vld_in : STD_LOGIC;
    signal out_V_dc_bus_1_ack_in : STD_LOGIC;
    signal out_I_LCL_2_a_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_2_a_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_2_a_1_vld_in : STD_LOGIC;
    signal out_I_LCL_2_a_1_ack_in : STD_LOGIC;
    signal out_I_LCL_2_b_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_2_b_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_2_b_1_vld_in : STD_LOGIC;
    signal out_I_LCL_2_b_1_ack_in : STD_LOGIC;
    signal out_I_LCL_2_c_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_I_LCL_2_c_1_vld_reg : STD_LOGIC := '0';
    signal out_I_LCL_2_c_1_vld_in : STD_LOGIC;
    signal out_I_LCL_2_c_1_ack_in : STD_LOGIC;
    signal out_V_grid_a_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_grid_a_1_vld_reg : STD_LOGIC := '0';
    signal out_V_grid_a_1_vld_in : STD_LOGIC;
    signal out_V_grid_a_1_ack_in : STD_LOGIC;
    signal out_V_grid_b_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_grid_b_1_vld_reg : STD_LOGIC := '0';
    signal out_V_grid_b_1_vld_in : STD_LOGIC;
    signal out_V_grid_b_1_ack_in : STD_LOGIC;
    signal out_V_grid_c_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_grid_c_1_vld_reg : STD_LOGIC := '0';
    signal out_V_grid_c_1_vld_in : STD_LOGIC;
    signal out_V_grid_c_1_ack_in : STD_LOGIC;
    signal out_V_fem_a_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_fem_a_1_vld_reg : STD_LOGIC := '0';
    signal out_V_fem_a_1_vld_in : STD_LOGIC;
    signal out_V_fem_a_1_ack_in : STD_LOGIC;
    signal out_V_fem_b_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_fem_b_1_vld_reg : STD_LOGIC := '0';
    signal out_V_fem_b_1_vld_in : STD_LOGIC;
    signal out_V_fem_b_1_ack_in : STD_LOGIC;
    signal out_V_fem_c_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal out_V_fem_c_1_vld_reg : STD_LOGIC := '0';
    signal out_V_fem_c_1_vld_in : STD_LOGIC;
    signal out_V_fem_c_1_ack_in : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal output_vector_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_vector_ce0 : STD_LOGIC;
    signal output_vector_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_vector_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_vector_ce1 : STD_LOGIC;
    signal output_vector_we1 : STD_LOGIC;
    signal output_vector_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_vector_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal counter_loc_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_55_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_2_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_541_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_546_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_551_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_556_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_561_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_566_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_571_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_576_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_581_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_586_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_591_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_596_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_601_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_606_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_32_fu_611_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal counter_loc_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_Vp_c_assign_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Vp_c_assign_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Vp_b_assign_fu_688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Vp_b_assign_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Vp_a_assign_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_Vp_a_assign_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge6_fu_716_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge6_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal storemerge5_fu_723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge5_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge4_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge4_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hls_fptoui_float_i_fu_455_ap_ready : STD_LOGIC;
    signal grp_p_hls_fptoui_float_i_fu_455_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_p_hls_fptoui_float_i_fu_460_ap_ready : STD_LOGIC;
    signal grp_p_hls_fptoui_float_i_fu_460_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_465_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_471_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_620_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_465_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_state41 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);

    component p_hls_fptoui_float_i IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gain_offset_trunccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gain_offset_truncdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gain_offset_truncbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_vector_U : component gain_offset_truncbkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_vector_address0,
        ce0 => output_vector_ce0,
        q0 => output_vector_q0,
        address1 => output_vector_address1,
        ce1 => output_vector_ce1,
        we1 => output_vector_we1,
        d1 => output_vector_d1,
        q1 => output_vector_q1);

    grp_p_hls_fptoui_float_i_fu_455 : component p_hls_fptoui_float_i
    port map (
        ap_ready => grp_p_hls_fptoui_float_i_fu_455_ap_ready,
        x => reg_515,
        ap_return => grp_p_hls_fptoui_float_i_fu_455_ap_return);

    grp_p_hls_fptoui_float_i_fu_460 : component p_hls_fptoui_float_i
    port map (
        ap_ready => grp_p_hls_fptoui_float_i_fu_460_ap_ready,
        x => reg_520,
        ap_return => grp_p_hls_fptoui_float_i_fu_460_ap_return);

    gain_offset_trunccud_U2 : component gain_offset_trunccud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_465_p0,
        din1 => grp_fu_465_p1,
        opcode => grp_fu_465_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_465_p2);

    gain_offset_truncdEe_U3 : component gain_offset_truncdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_471_p0,
        din1 => grp_fu_471_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_I_LCL_1_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_LCL_1_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_LCL_1_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_LCL_2_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_LCL_2_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_LCL_2_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_pmsm_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_pmsm_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_I_pmsm_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_dc_bus_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_fem_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_fem_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_fem_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_grid_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_grid_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    out_V_grid_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                counter <= counter_loc_fu_642_p3;
                counter_loc_reg_882 <= counter_loc_fu_642_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_fu_642_p3 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                in_Vp_a_assign_reg_911 <= in_Vp_a_assign_fu_708_p3;
                tmp_53_reg_906 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_fu_642_p3 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                in_Vp_b_assign_reg_901 <= in_Vp_b_assign_fu_688_p3;
                tmp_54_reg_896 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_fu_642_p3 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                in_Vp_c_assign_reg_891 <= in_Vp_c_assign_fu_668_p3;
                tmp_55_reg_886 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_1_a_1_vld_reg = ap_const_logic_0) and (out_I_LCL_1_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_a_1_vld_in = ap_const_logic_1) and (out_I_LCL_1_a_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_1_a_1_data_reg <= tmp_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_1_b_1_vld_reg = ap_const_logic_0) and (out_I_LCL_1_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_b_1_vld_in = ap_const_logic_1) and (out_I_LCL_1_b_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_1_b_1_data_reg <= tmp_4_fu_541_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_1_c_1_vld_reg = ap_const_logic_0) and (out_I_LCL_1_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_c_1_vld_in = ap_const_logic_1) and (out_I_LCL_1_c_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_1_c_1_data_reg <= tmp_6_fu_546_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_2_a_1_vld_reg = ap_const_logic_0) and (out_I_LCL_2_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_a_1_vld_in = ap_const_logic_1) and (out_I_LCL_2_a_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_2_a_1_data_reg <= tmp_14_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_2_b_1_vld_reg = ap_const_logic_0) and (out_I_LCL_2_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_b_1_vld_in = ap_const_logic_1) and (out_I_LCL_2_b_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_2_b_1_data_reg <= tmp_16_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_LCL_2_c_1_vld_reg = ap_const_logic_0) and (out_I_LCL_2_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_c_1_vld_in = ap_const_logic_1) and (out_I_LCL_2_c_1_vld_reg = ap_const_logic_1)))) then
                out_I_LCL_2_c_1_data_reg <= tmp_18_fu_576_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_pmsm_a_1_vld_reg = ap_const_logic_0) and (out_I_pmsm_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_a_1_vld_in = ap_const_logic_1) and (out_I_pmsm_a_1_vld_reg = ap_const_logic_1)))) then
                out_I_pmsm_a_1_data_reg <= tmp_8_fu_551_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_pmsm_b_1_vld_reg = ap_const_logic_0) and (out_I_pmsm_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_b_1_vld_in = ap_const_logic_1) and (out_I_pmsm_b_1_vld_reg = ap_const_logic_1)))) then
                out_I_pmsm_b_1_data_reg <= tmp_10_fu_556_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_I_pmsm_c_1_vld_reg = ap_const_logic_0) and (out_I_pmsm_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_c_1_vld_in = ap_const_logic_1) and (out_I_pmsm_c_1_vld_reg = ap_const_logic_1)))) then
                out_I_pmsm_c_1_data_reg <= tmp_12_fu_561_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_dc_bus_1_vld_reg = ap_const_logic_0) and (out_V_dc_bus_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_dc_bus_1_vld_in = ap_const_logic_1) and (out_V_dc_bus_1_vld_reg = ap_const_logic_1)))) then
                out_V_dc_bus_1_data_reg <= tmp_20_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_fem_a_1_vld_reg = ap_const_logic_0) and (out_V_fem_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_a_1_vld_in = ap_const_logic_1) and (out_V_fem_a_1_vld_reg = ap_const_logic_1)))) then
                out_V_fem_a_1_data_reg <= tmp_28_fu_601_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_fem_b_1_vld_reg = ap_const_logic_0) and (out_V_fem_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_b_1_vld_in = ap_const_logic_1) and (out_V_fem_b_1_vld_reg = ap_const_logic_1)))) then
                out_V_fem_b_1_data_reg <= tmp_30_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_fem_c_1_vld_reg = ap_const_logic_0) and (out_V_fem_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_c_1_vld_in = ap_const_logic_1) and (out_V_fem_c_1_vld_reg = ap_const_logic_1)))) then
                out_V_fem_c_1_data_reg <= tmp_32_fu_611_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_grid_a_1_vld_reg = ap_const_logic_0) and (out_V_grid_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_a_1_vld_in = ap_const_logic_1) and (out_V_grid_a_1_vld_reg = ap_const_logic_1)))) then
                out_V_grid_a_1_data_reg <= tmp_22_fu_586_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_grid_b_1_vld_reg = ap_const_logic_0) and (out_V_grid_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_b_1_vld_in = ap_const_logic_1) and (out_V_grid_b_1_vld_reg = ap_const_logic_1)))) then
                out_V_grid_b_1_data_reg <= tmp_24_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (out_V_grid_c_1_vld_reg = ap_const_logic_0) and (out_V_grid_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_c_1_vld_in = ap_const_logic_1) and (out_V_grid_c_1_vld_reg = ap_const_logic_1)))) then
                out_V_grid_c_1_data_reg <= tmp_26_fu_596_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_515 <= output_vector_q0;
                reg_520 <= output_vector_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then
                reg_525 <= grp_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then
                reg_531 <= grp_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                storemerge4_reg_926 <= storemerge4_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                storemerge5_reg_921 <= storemerge5_fu_723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                storemerge6_reg_916 <= storemerge6_fu_716_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_I_LCL_1_a_1_ack_in, out_I_LCL_1_b_1_ack_in, out_I_LCL_1_c_1_ack_in, out_I_pmsm_a_1_ack_in, out_I_pmsm_b_1_ack_in, out_I_pmsm_c_1_ack_in, out_V_dc_bus_1_ack_in, out_I_LCL_2_a_1_ack_in, out_I_LCL_2_b_1_ack_in, out_I_LCL_2_c_1_ack_in, out_V_grid_a_1_ack_in, out_V_grid_b_1_ack_in, out_V_grid_c_1_ack_in, out_V_fem_a_1_ack_in, out_V_fem_b_1_ack_in, out_V_fem_c_1_ack_in, ap_CS_fsm_state12, counter_loc_fu_642_p3, ap_CS_fsm_state41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not((counter_loc_fu_642_p3 = ap_const_lv32_0)) and not((counter_loc_fu_642_p3 = ap_const_lv32_1)) and not((counter_loc_fu_642_p3 = ap_const_lv32_2)) and not((counter_loc_fu_642_p3 = ap_const_lv32_3)) and not((counter_loc_fu_642_p3 = ap_const_lv32_4)) and not((counter_loc_fu_642_p3 = ap_const_lv32_5)) and not((counter_loc_fu_642_p3 = ap_const_lv32_6)) and not((counter_loc_fu_642_p3 = ap_const_lv32_7)) and not((counter_loc_fu_642_p3 = ap_const_lv32_8)) and not((counter_loc_fu_642_p3 = ap_const_lv32_9)) and not((counter_loc_fu_642_p3 = ap_const_lv32_D)) and not((counter_loc_fu_642_p3 = ap_const_lv32_E)) and not((counter_loc_fu_642_p3 = ap_const_lv32_F)) and not((counter_loc_fu_642_p3 = ap_const_lv32_A)) and not((counter_loc_fu_642_p3 = ap_const_lv32_B)) and not((counter_loc_fu_642_p3 = ap_const_lv32_C)) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and ((counter_loc_fu_642_p3 = ap_const_lv32_1) or (counter_loc_fu_642_p3 = ap_const_lv32_9) or (counter_loc_fu_642_p3 = ap_const_lv32_8) or (counter_loc_fu_642_p3 = ap_const_lv32_0) or (counter_loc_fu_642_p3 = ap_const_lv32_7) or (counter_loc_fu_642_p3 = ap_const_lv32_6) or (counter_loc_fu_642_p3 = ap_const_lv32_5) or (counter_loc_fu_642_p3 = ap_const_lv32_4) or (counter_loc_fu_642_p3 = ap_const_lv32_3) or (counter_loc_fu_642_p3 = ap_const_lv32_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and ((counter_loc_fu_642_p3 = ap_const_lv32_A) or (counter_loc_fu_642_p3 = ap_const_lv32_B) or (counter_loc_fu_642_p3 = ap_const_lv32_C)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if ((not(((out_I_LCL_1_a_1_ack_in = ap_const_logic_0) or (out_V_fem_c_1_ack_in = ap_const_logic_0) or (out_V_fem_b_1_ack_in = ap_const_logic_0) or (out_V_fem_a_1_ack_in = ap_const_logic_0) or (out_V_grid_c_1_ack_in = ap_const_logic_0) or (out_V_grid_b_1_ack_in = ap_const_logic_0) or (out_V_grid_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_b_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_a_1_ack_in = ap_const_logic_0) or (out_V_dc_bus_1_ack_in = ap_const_logic_0) or (out_I_pmsm_c_1_ack_in = ap_const_logic_0) or (out_I_pmsm_b_1_ack_in = ap_const_logic_0) or (out_I_pmsm_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_b_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state41_assign_proc : process(out_I_LCL_1_a_1_ack_in, out_I_LCL_1_b_1_ack_in, out_I_LCL_1_c_1_ack_in, out_I_pmsm_a_1_ack_in, out_I_pmsm_b_1_ack_in, out_I_pmsm_c_1_ack_in, out_V_dc_bus_1_ack_in, out_I_LCL_2_a_1_ack_in, out_I_LCL_2_b_1_ack_in, out_I_LCL_2_c_1_ack_in, out_V_grid_a_1_ack_in, out_V_grid_b_1_ack_in, out_V_grid_c_1_ack_in, out_V_fem_a_1_ack_in, out_V_fem_b_1_ack_in, out_V_fem_c_1_ack_in)
    begin
                ap_block_state41 <= ((out_I_LCL_1_a_1_ack_in = ap_const_logic_0) or (out_V_fem_c_1_ack_in = ap_const_logic_0) or (out_V_fem_b_1_ack_in = ap_const_logic_0) or (out_V_fem_a_1_ack_in = ap_const_logic_0) or (out_V_grid_c_1_ack_in = ap_const_logic_0) or (out_V_grid_b_1_ack_in = ap_const_logic_0) or (out_V_grid_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_b_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_a_1_ack_in = ap_const_logic_0) or (out_V_dc_bus_1_ack_in = ap_const_logic_0) or (out_I_pmsm_c_1_ack_in = ap_const_logic_0) or (out_I_pmsm_b_1_ack_in = ap_const_logic_0) or (out_I_pmsm_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_b_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(out_I_LCL_1_a_1_ack_in, out_I_LCL_1_b_1_ack_in, out_I_LCL_1_c_1_ack_in, out_I_pmsm_a_1_ack_in, out_I_pmsm_b_1_ack_in, out_I_pmsm_c_1_ack_in, out_V_dc_bus_1_ack_in, out_I_LCL_2_a_1_ack_in, out_I_LCL_2_b_1_ack_in, out_I_LCL_2_c_1_ack_in, out_V_grid_a_1_ack_in, out_V_grid_b_1_ack_in, out_V_grid_c_1_ack_in, out_V_fem_a_1_ack_in, out_V_fem_b_1_ack_in, out_V_fem_c_1_ack_in, ap_CS_fsm_state41)
    begin
        if ((not(((out_I_LCL_1_a_1_ack_in = ap_const_logic_0) or (out_V_fem_c_1_ack_in = ap_const_logic_0) or (out_V_fem_b_1_ack_in = ap_const_logic_0) or (out_V_fem_a_1_ack_in = ap_const_logic_0) or (out_V_grid_c_1_ack_in = ap_const_logic_0) or (out_V_grid_b_1_ack_in = ap_const_logic_0) or (out_V_grid_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_b_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_a_1_ack_in = ap_const_logic_0) or (out_V_dc_bus_1_ack_in = ap_const_logic_0) or (out_I_pmsm_c_1_ack_in = ap_const_logic_0) or (out_I_pmsm_b_1_ack_in = ap_const_logic_0) or (out_I_pmsm_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_b_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_I_LCL_1_a_1_ack_in, out_I_LCL_1_b_1_ack_in, out_I_LCL_1_c_1_ack_in, out_I_pmsm_a_1_ack_in, out_I_pmsm_b_1_ack_in, out_I_pmsm_c_1_ack_in, out_V_dc_bus_1_ack_in, out_I_LCL_2_a_1_ack_in, out_I_LCL_2_b_1_ack_in, out_I_LCL_2_c_1_ack_in, out_V_grid_a_1_ack_in, out_V_grid_b_1_ack_in, out_V_grid_c_1_ack_in, out_V_fem_a_1_ack_in, out_V_fem_b_1_ack_in, out_V_fem_c_1_ack_in, ap_CS_fsm_state41)
    begin
        if ((not(((out_I_LCL_1_a_1_ack_in = ap_const_logic_0) or (out_V_fem_c_1_ack_in = ap_const_logic_0) or (out_V_fem_b_1_ack_in = ap_const_logic_0) or (out_V_fem_a_1_ack_in = ap_const_logic_0) or (out_V_grid_c_1_ack_in = ap_const_logic_0) or (out_V_grid_b_1_ack_in = ap_const_logic_0) or (out_V_grid_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_b_1_ack_in = ap_const_logic_0) or (out_I_LCL_2_a_1_ack_in = ap_const_logic_0) or (out_V_dc_bus_1_ack_in = ap_const_logic_0) or (out_I_pmsm_c_1_ack_in = ap_const_logic_0) or (out_I_pmsm_b_1_ack_in = ap_const_logic_0) or (out_I_pmsm_a_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_c_1_ack_in = ap_const_logic_0) or (out_I_LCL_1_b_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    counter_loc_fu_642_p3 <= 
        ap_const_lv32_0 when (icmp_fu_630_p2(0) = '1') else 
        tmp_s_fu_636_p2;

    grp_fu_465_opcode_assign_proc : process(counter_loc_reg_882, tmp_55_reg_886, tmp_54_reg_896, tmp_53_reg_906, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            grp_fu_465_opcode <= ap_const_lv2_1;
        elsif ((((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_465_opcode <= ap_const_lv2_0;
        else 
            grp_fu_465_opcode <= "XX";
        end if; 
    end process;


    grp_fu_465_p0_assign_proc : process(reg_525, counter_loc_reg_882, tmp_55_reg_886, tmp_54_reg_896, tmp_53_reg_906, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            grp_fu_465_p0 <= ap_const_lv32_45000000;
        elsif ((((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_465_p0 <= reg_525;
        else 
            grp_fu_465_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_465_p1_assign_proc : process(reg_525, counter_loc_reg_882, tmp_55_reg_886, tmp_54_reg_896, tmp_53_reg_906, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            grp_fu_465_p1 <= reg_525;
        elsif ((((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_465_p1 <= ap_const_lv32_45000000;
        else 
            grp_fu_465_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_471_p0_assign_proc : process(in_I_LCL_1_a, in_I_LCL_1_b, in_I_LCL_1_c, in_I_pmsm_a, in_I_pmsm_b, in_I_pmsm_c, in_V_dc_bus, in_I_LCL_2_a, in_I_LCL_2_b, in_I_LCL_2_c, in_V_fem_a, in_V_fem_b, in_V_fem_c, counter_loc_reg_882, tmp_55_reg_886, tmp_54_reg_896, tmp_53_reg_906, ap_CS_fsm_state12, counter_loc_fu_642_p3, in_Vp_c_assign_reg_891, in_Vp_b_assign_reg_901, in_Vp_a_assign_reg_911, ap_CS_fsm_state22)
    begin
        if (((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_471_p0 <= in_Vp_a_assign_reg_911;
        elsif (((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_471_p0 <= in_Vp_b_assign_reg_901;
        elsif (((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_471_p0 <= in_Vp_c_assign_reg_891;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_1_a;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_1_b;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_1_c;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_pmsm_a;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_pmsm_b;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_pmsm_c;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_2_a;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_2_b;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_I_LCL_2_c;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_V_dc_bus;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_V_fem_a;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_V_fem_b;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p0 <= in_V_fem_c;
        else 
            grp_fu_471_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_471_p1_assign_proc : process(counter_loc_reg_882, tmp_55_reg_886, tmp_54_reg_896, tmp_53_reg_906, ap_CS_fsm_state12, counter_loc_fu_642_p3, ap_CS_fsm_state22)
    begin
        if ((((counter_loc_fu_642_p3 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_471_p1 <= ap_const_lv32_40144135;
        elsif (((counter_loc_fu_642_p3 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_471_p1 <= ap_const_lv32_3F82F1AA;
        elsif ((((counter_loc_fu_642_p3 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((counter_loc_fu_642_p3 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_53_reg_906 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((tmp_54_reg_896 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((tmp_55_reg_886 = ap_const_lv1_0) and (counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_471_p1 <= ap_const_lv32_40947CAF;
        else 
            grp_fu_471_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_491_p2 <= "1" when (CB1_K1_K3_V = ap_const_lv3_0) else "0";
    grp_fu_497_p2 <= "1" when (CB1_K1_K3_V = ap_const_lv3_1) else "0";
    grp_fu_503_p2 <= "1" when (CB1_K1_K3_V = ap_const_lv3_2) else "0";
    grp_fu_509_p2 <= "1" when (CB1_K1_K3_V = ap_const_lv3_3) else "0";
    icmp_fu_630_p2 <= "1" when (signed(tmp_fu_620_p4) > signed(ap_const_lv28_0)) else "0";
    in_Vp_a_assign_fu_708_p3 <= 
        in_Vp_a when (or_cond1_fu_702_p2(0) = '1') else 
        in_V_grid_a;
    in_Vp_b_assign_fu_688_p3 <= 
        in_Vp_b when (or_cond3_fu_682_p2(0) = '1') else 
        in_V_grid_b;
    in_Vp_c_assign_fu_668_p3 <= 
        in_Vp_c when (or_cond5_fu_662_p2(0) = '1') else 
        in_V_grid_c;
    or_cond1_fu_702_p2 <= (tmp3_fu_696_p2 or grp_fu_497_p2);
    or_cond3_fu_682_p2 <= (tmp4_fu_676_p2 or grp_fu_497_p2);
    or_cond5_fu_662_p2 <= (tmp5_fu_656_p2 or grp_fu_497_p2);
    out_I_LCL_1_a <= out_I_LCL_1_a_1_data_reg;

    out_I_LCL_1_a_1_ack_in_assign_proc : process(out_I_LCL_1_a_1_vld_reg)
    begin
        if (((out_I_LCL_1_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_a_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_1_a_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_1_a_1_vld_in_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_I_LCL_1_a_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_LCL_1_b <= out_I_LCL_1_b_1_data_reg;

    out_I_LCL_1_b_1_ack_in_assign_proc : process(out_I_LCL_1_b_1_vld_reg)
    begin
        if (((out_I_LCL_1_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_b_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_1_b_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_1_b_1_vld_in_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_I_LCL_1_b_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_LCL_1_c <= out_I_LCL_1_c_1_data_reg;

    out_I_LCL_1_c_1_ack_in_assign_proc : process(out_I_LCL_1_c_1_vld_reg)
    begin
        if (((out_I_LCL_1_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_1_c_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_1_c_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_1_c_1_vld_in_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_I_LCL_1_c_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_1_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_LCL_2_a <= out_I_LCL_2_a_1_data_reg;

    out_I_LCL_2_a_1_ack_in_assign_proc : process(out_I_LCL_2_a_1_vld_reg)
    begin
        if (((out_I_LCL_2_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_a_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_2_a_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_2_a_1_vld_in_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_I_LCL_2_a_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_LCL_2_b <= out_I_LCL_2_b_1_data_reg;

    out_I_LCL_2_b_1_ack_in_assign_proc : process(out_I_LCL_2_b_1_vld_reg)
    begin
        if (((out_I_LCL_2_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_b_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_2_b_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_2_b_1_vld_in_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_I_LCL_2_b_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_LCL_2_c <= out_I_LCL_2_c_1_data_reg;

    out_I_LCL_2_c_1_ack_in_assign_proc : process(out_I_LCL_2_c_1_vld_reg)
    begin
        if (((out_I_LCL_2_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_LCL_2_c_1_vld_reg = ap_const_logic_1)))) then 
            out_I_LCL_2_c_1_ack_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_LCL_2_c_1_vld_in_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_I_LCL_2_c_1_vld_in <= ap_const_logic_1;
        else 
            out_I_LCL_2_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_pmsm_a <= out_I_pmsm_a_1_data_reg;

    out_I_pmsm_a_1_ack_in_assign_proc : process(out_I_pmsm_a_1_vld_reg)
    begin
        if (((out_I_pmsm_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_a_1_vld_reg = ap_const_logic_1)))) then 
            out_I_pmsm_a_1_ack_in <= ap_const_logic_1;
        else 
            out_I_pmsm_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_pmsm_a_1_vld_in_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_I_pmsm_a_1_vld_in <= ap_const_logic_1;
        else 
            out_I_pmsm_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_pmsm_b <= out_I_pmsm_b_1_data_reg;

    out_I_pmsm_b_1_ack_in_assign_proc : process(out_I_pmsm_b_1_vld_reg)
    begin
        if (((out_I_pmsm_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_b_1_vld_reg = ap_const_logic_1)))) then 
            out_I_pmsm_b_1_ack_in <= ap_const_logic_1;
        else 
            out_I_pmsm_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_pmsm_b_1_vld_in_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_I_pmsm_b_1_vld_in <= ap_const_logic_1;
        else 
            out_I_pmsm_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_I_pmsm_c <= out_I_pmsm_c_1_data_reg;

    out_I_pmsm_c_1_ack_in_assign_proc : process(out_I_pmsm_c_1_vld_reg)
    begin
        if (((out_I_pmsm_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_I_pmsm_c_1_vld_reg = ap_const_logic_1)))) then 
            out_I_pmsm_c_1_ack_in <= ap_const_logic_1;
        else 
            out_I_pmsm_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_I_pmsm_c_1_vld_in_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_I_pmsm_c_1_vld_in <= ap_const_logic_1;
        else 
            out_I_pmsm_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_dc_bus <= out_V_dc_bus_1_data_reg;

    out_V_dc_bus_1_ack_in_assign_proc : process(out_V_dc_bus_1_vld_reg)
    begin
        if (((out_V_dc_bus_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_dc_bus_1_vld_reg = ap_const_logic_1)))) then 
            out_V_dc_bus_1_ack_in <= ap_const_logic_1;
        else 
            out_V_dc_bus_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_dc_bus_1_vld_in_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_V_dc_bus_1_vld_in <= ap_const_logic_1;
        else 
            out_V_dc_bus_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_fem_a <= out_V_fem_a_1_data_reg;

    out_V_fem_a_1_ack_in_assign_proc : process(out_V_fem_a_1_vld_reg)
    begin
        if (((out_V_fem_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_a_1_vld_reg = ap_const_logic_1)))) then 
            out_V_fem_a_1_ack_in <= ap_const_logic_1;
        else 
            out_V_fem_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_fem_a_1_vld_in_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_V_fem_a_1_vld_in <= ap_const_logic_1;
        else 
            out_V_fem_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_fem_b <= out_V_fem_b_1_data_reg;

    out_V_fem_b_1_ack_in_assign_proc : process(out_V_fem_b_1_vld_reg)
    begin
        if (((out_V_fem_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_b_1_vld_reg = ap_const_logic_1)))) then 
            out_V_fem_b_1_ack_in <= ap_const_logic_1;
        else 
            out_V_fem_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_fem_b_1_vld_in_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_V_fem_b_1_vld_in <= ap_const_logic_1;
        else 
            out_V_fem_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_fem_c <= out_V_fem_c_1_data_reg;

    out_V_fem_c_1_ack_in_assign_proc : process(out_V_fem_c_1_vld_reg)
    begin
        if (((out_V_fem_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_fem_c_1_vld_reg = ap_const_logic_1)))) then 
            out_V_fem_c_1_ack_in <= ap_const_logic_1;
        else 
            out_V_fem_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_fem_c_1_vld_in_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_V_fem_c_1_vld_in <= ap_const_logic_1;
        else 
            out_V_fem_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_grid_a <= out_V_grid_a_1_data_reg;

    out_V_grid_a_1_ack_in_assign_proc : process(out_V_grid_a_1_vld_reg)
    begin
        if (((out_V_grid_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_a_1_vld_reg = ap_const_logic_1)))) then 
            out_V_grid_a_1_ack_in <= ap_const_logic_1;
        else 
            out_V_grid_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_grid_a_1_vld_in_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_V_grid_a_1_vld_in <= ap_const_logic_1;
        else 
            out_V_grid_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_grid_b <= out_V_grid_b_1_data_reg;

    out_V_grid_b_1_ack_in_assign_proc : process(out_V_grid_b_1_vld_reg)
    begin
        if (((out_V_grid_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_b_1_vld_reg = ap_const_logic_1)))) then 
            out_V_grid_b_1_ack_in <= ap_const_logic_1;
        else 
            out_V_grid_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_grid_b_1_vld_in_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_V_grid_b_1_vld_in <= ap_const_logic_1;
        else 
            out_V_grid_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_grid_c <= out_V_grid_c_1_data_reg;

    out_V_grid_c_1_ack_in_assign_proc : process(out_V_grid_c_1_vld_reg)
    begin
        if (((out_V_grid_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (out_V_grid_c_1_vld_reg = ap_const_logic_1)))) then 
            out_V_grid_c_1_ack_in <= ap_const_logic_1;
        else 
            out_V_grid_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    out_V_grid_c_1_vld_in_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_V_grid_c_1_vld_in <= ap_const_logic_1;
        else 
            out_V_grid_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    output_vector_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_vector_address0 <= ap_const_lv4_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_vector_address0 <= ap_const_lv4_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_vector_address0 <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_vector_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_vector_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_vector_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_vector_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_vector_address0 <= ap_const_lv4_0;
        else 
            output_vector_address0 <= "XXXX";
        end if; 
    end process;


    output_vector_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, counter_loc_reg_882, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if (((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_vector_address1 <= ap_const_lv4_0;
        elsif (((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_vector_address1 <= ap_const_lv4_2;
        elsif (((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_vector_address1 <= ap_const_lv4_4;
        elsif (((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_vector_address1 <= ap_const_lv4_6;
        elsif (((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            output_vector_address1 <= ap_const_lv4_8;
        elsif (((counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_vector_address1 <= ap_const_lv4_A;
        elsif (((counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_vector_address1 <= ap_const_lv4_C;
        elsif (((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            output_vector_address1 <= ap_const_lv4_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_vector_address1 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_vector_address1 <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            output_vector_address1 <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_vector_address1 <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_vector_address1 <= ap_const_lv4_7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_vector_address1 <= ap_const_lv4_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_vector_address1 <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            output_vector_address1 <= ap_const_lv4_1;
        else 
            output_vector_address1 <= "XXXX";
        end if; 
    end process;


    output_vector_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_vector_ce0 <= ap_const_logic_1;
        else 
            output_vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_vector_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, counter_loc_reg_882, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_vector_ce1 <= ap_const_logic_1;
        else 
            output_vector_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_vector_d1_assign_proc : process(counter_loc_reg_882, reg_531, storemerge6_reg_916, storemerge5_reg_921, storemerge4_reg_926, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if (((counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_vector_d1 <= storemerge4_reg_926;
        elsif (((counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_vector_d1 <= storemerge5_reg_921;
        elsif (((counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_vector_d1 <= storemerge6_reg_916;
        elsif ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_vector_d1 <= reg_531;
        else 
            output_vector_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_vector_we1_assign_proc : process(counter_loc_reg_882, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((((counter_loc_reg_882 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((counter_loc_reg_882 = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((counter_loc_reg_882 = ap_const_lv32_B) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((counter_loc_reg_882 = ap_const_lv32_C) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((counter_loc_reg_882 = ap_const_lv32_D) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_E) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((counter_loc_reg_882 = ap_const_lv32_F) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            output_vector_we1 <= ap_const_logic_1;
        else 
            output_vector_we1 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge4_fu_730_p3 <= 
        ap_const_lv32_45000000 when (tmp_53_reg_906(0) = '1') else 
        grp_fu_465_p2;
    storemerge5_fu_723_p3 <= 
        ap_const_lv32_45000000 when (tmp_54_reg_896(0) = '1') else 
        grp_fu_465_p2;
    storemerge6_fu_716_p3 <= 
        ap_const_lv32_45000000 when (tmp_55_reg_886(0) = '1') else 
        grp_fu_465_p2;
    tmp3_fu_696_p2 <= (grp_fu_509_p2 or grp_fu_503_p2);
    tmp4_fu_676_p2 <= (grp_fu_509_p2 or grp_fu_503_p2);
    tmp5_fu_656_p2 <= (grp_fu_509_p2 or grp_fu_503_p2);
    tmp_10_fu_556_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_12_fu_561_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_14_fu_566_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_16_fu_571_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_18_fu_576_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_20_fu_581_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_22_fu_586_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_24_fu_591_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_26_fu_596_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_28_fu_601_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_2_fu_536_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_30_fu_606_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_32_fu_611_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_4_fu_541_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_6_fu_546_p1 <= grp_p_hls_fptoui_float_i_fu_455_ap_return(12 - 1 downto 0);
    tmp_8_fu_551_p1 <= grp_p_hls_fptoui_float_i_fu_460_ap_return(12 - 1 downto 0);
    tmp_fu_620_p4 <= counter(31 downto 4);
    tmp_s_fu_636_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter));
end behav;
