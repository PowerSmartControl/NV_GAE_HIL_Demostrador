-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dc_dc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dutty_pot : IN STD_LOGIC_VECTOR (11 downto 0);
    V_N_gnd : IN STD_LOGIC_VECTOR (31 downto 0);
    enable : IN STD_LOGIC;
    T1 : IN STD_LOGIC;
    T2 : IN STD_LOGIC;
    T3 : IN STD_LOGIC;
    T4 : IN STD_LOGIC;
    T5 : IN STD_LOGIC;
    T6 : IN STD_LOGIC;
    T1_out : OUT STD_LOGIC;
    T2_out : OUT STD_LOGIC;
    T3_out : OUT STD_LOGIC;
    T4_out : OUT STD_LOGIC;
    T5_out : OUT STD_LOGIC;
    T6_out : OUT STD_LOGIC;
    V_N_gnd_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dc_dc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dc_dc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.705000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=695,HLS_SYN_LUT=1624}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_199 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal T1_out_1_data_reg : STD_LOGIC := '0';
    signal T1_out_1_data_in : STD_LOGIC;
    signal T1_out_1_vld_reg : STD_LOGIC := '0';
    signal T1_out_1_vld_in : STD_LOGIC;
    signal T1_out_1_ack_in : STD_LOGIC;
    signal T2_out_1_data_reg : STD_LOGIC := '0';
    signal T2_out_1_data_in : STD_LOGIC;
    signal T2_out_1_vld_reg : STD_LOGIC := '0';
    signal T2_out_1_vld_in : STD_LOGIC;
    signal T2_out_1_ack_in : STD_LOGIC;
    signal T3_out_1_data_reg : STD_LOGIC := '0';
    signal T3_out_1_data_in : STD_LOGIC;
    signal T3_out_1_vld_reg : STD_LOGIC := '0';
    signal T3_out_1_vld_in : STD_LOGIC;
    signal T3_out_1_ack_in : STD_LOGIC;
    signal T4_out_1_data_reg : STD_LOGIC := '0';
    signal T4_out_1_data_in : STD_LOGIC;
    signal T4_out_1_vld_reg : STD_LOGIC := '0';
    signal T4_out_1_vld_in : STD_LOGIC;
    signal T4_out_1_ack_in : STD_LOGIC;
    signal T5_out_1_data_reg : STD_LOGIC := '0';
    signal T5_out_1_vld_reg : STD_LOGIC := '0';
    signal T5_out_1_vld_in : STD_LOGIC;
    signal T5_out_1_ack_in : STD_LOGIC;
    signal T6_out_1_data_reg : STD_LOGIC := '0';
    signal T6_out_1_vld_reg : STD_LOGIC := '0';
    signal T6_out_1_vld_in : STD_LOGIC;
    signal T6_out_1_ack_in : STD_LOGIC;
    signal V_N_gnd_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal V_N_gnd_out_1_vld_reg : STD_LOGIC := '0';
    signal V_N_gnd_out_1_vld_in : STD_LOGIC;
    signal V_N_gnd_out_1_ack_in : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_s_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_2_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal enable_read_read_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge3_phi_fu_211_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_storemerge2_phi_fu_224_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_237_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_396_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_272_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_i_i_i_fu_276_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast1_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_i_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_cast_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_318_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_330_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i_cast2_fu_286_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_7_i_i_i_fu_334_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_8_i_i_i_fu_338_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_344_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_3_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_362_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component dc_dc_fmul_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dc_dc_sitofp_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dc_dc_fmul_32ns_3bkb_U1 : component dc_dc_fmul_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_reg_448,
        din1 => ap_const_lv32_3DCCCCCD,
        ce => ap_const_logic_1,
        dout => grp_fu_246_p2);

    dc_dc_sitofp_32nscud_U2 : component dc_dc_sitofp_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_251_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    T1_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    T2_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    T3_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    T4_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    T5_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    T6_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    V_N_gnd_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T1_out_1_vld_reg) and (ap_const_logic_1 = T1_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T1_out_1_vld_in) and (ap_const_logic_1 = T1_out_1_vld_reg)))) then
                T1_out_1_data_reg <= T1_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T2_out_1_vld_reg) and (ap_const_logic_1 = T2_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T2_out_1_vld_in) and (ap_const_logic_1 = T2_out_1_vld_reg)))) then
                T2_out_1_data_reg <= T2_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T3_out_1_vld_reg) and (ap_const_logic_1 = T3_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T3_out_1_vld_in) and (ap_const_logic_1 = T3_out_1_vld_reg)))) then
                T3_out_1_data_reg <= T3_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T4_out_1_vld_reg) and (ap_const_logic_1 = T4_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T4_out_1_vld_in) and (ap_const_logic_1 = T4_out_1_vld_reg)))) then
                T4_out_1_data_reg <= T4_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T5_out_1_vld_reg) and (ap_const_logic_1 = T5_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T5_out_1_vld_in) and (ap_const_logic_1 = T5_out_1_vld_reg)))) then
                T5_out_1_data_reg <= ap_phi_mux_storemerge3_phi_fu_211_p4(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = T6_out_1_vld_reg) and (ap_const_logic_1 = T6_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T6_out_1_vld_in) and (ap_const_logic_1 = T6_out_1_vld_reg)))) then
                T6_out_1_data_reg <= ap_phi_mux_storemerge2_phi_fu_224_p4(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = V_N_gnd_out_1_vld_reg) and (ap_const_logic_1 = V_N_gnd_out_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_N_gnd_out_1_vld_in) and (ap_const_logic_1 = V_N_gnd_out_1_vld_reg)))) then
                V_N_gnd_out_1_data_reg <= ap_phi_mux_storemerge1_phi_fu_237_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                counter <= storemerge_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                p_Val2_2_reg_463 <= p_Val2_2_fu_372_p3;
                p_Val2_s_reg_458 <= p_Val2_s_fu_259_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_8_reg_448 <= grp_fu_251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                x_assign_reg_453 <= grp_fu_246_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, T1_out_1_ack_in, T2_out_1_ack_in, T3_out_1_ack_in, T4_out_1_ack_in, T5_out_1_ack_in, T6_out_1_ack_in, V_N_gnd_out_1_ack_in, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if ((not(((ap_const_logic_0 = T2_out_1_ack_in) or (ap_const_logic_0 = T1_out_1_ack_in) or (ap_const_logic_0 = V_N_gnd_out_1_ack_in) or (ap_const_logic_0 = T6_out_1_ack_in) or (ap_const_logic_0 = T5_out_1_ack_in) or (ap_const_logic_0 = T4_out_1_ack_in) or (ap_const_logic_0 = T3_out_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    T1_out <= T1_out_1_data_reg;

    T1_out_1_ack_in_assign_proc : process(T1_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T1_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T1_out_1_vld_reg)))) then 
            T1_out_1_ack_in <= ap_const_logic_1;
        else 
            T1_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T1_out_1_data_in_assign_proc : process(T1, ap_CS_fsm_state12, enable_read_read_fu_140_p2, tmp_1_fu_429_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                T1_out_1_data_in <= tmp_1_fu_429_p2(0);
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                T1_out_1_data_in <= T1;
            else 
                T1_out_1_data_in <= 'X';
            end if;
        else 
            T1_out_1_data_in <= 'X';
        end if; 
    end process;


    T1_out_1_vld_in_assign_proc : process(ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((((enable_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((enable_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            T1_out_1_vld_in <= ap_const_logic_1;
        else 
            T1_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    T2_out <= T2_out_1_data_reg;

    T2_out_1_ack_in_assign_proc : process(T2_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T2_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T2_out_1_vld_reg)))) then 
            T2_out_1_ack_in <= ap_const_logic_1;
        else 
            T2_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T2_out_1_data_in_assign_proc : process(T2, ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                T2_out_1_data_in <= ap_const_logic_0;
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                T2_out_1_data_in <= T2;
            else 
                T2_out_1_data_in <= 'X';
            end if;
        else 
            T2_out_1_data_in <= 'X';
        end if; 
    end process;


    T2_out_1_vld_in_assign_proc : process(ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((((enable_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((enable_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            T2_out_1_vld_in <= ap_const_logic_1;
        else 
            T2_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    T3_out <= T3_out_1_data_reg;

    T3_out_1_ack_in_assign_proc : process(T3_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T3_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T3_out_1_vld_reg)))) then 
            T3_out_1_ack_in <= ap_const_logic_1;
        else 
            T3_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T3_out_1_data_in_assign_proc : process(T3, ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                T3_out_1_data_in <= ap_const_logic_0;
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                T3_out_1_data_in <= T3;
            else 
                T3_out_1_data_in <= 'X';
            end if;
        else 
            T3_out_1_data_in <= 'X';
        end if; 
    end process;


    T3_out_1_vld_in_assign_proc : process(ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((((enable_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((enable_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            T3_out_1_vld_in <= ap_const_logic_1;
        else 
            T3_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    T4_out <= T4_out_1_data_reg;

    T4_out_1_ack_in_assign_proc : process(T4_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T4_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T4_out_1_vld_reg)))) then 
            T4_out_1_ack_in <= ap_const_logic_1;
        else 
            T4_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T4_out_1_data_in_assign_proc : process(T4, ap_CS_fsm_state12, enable_read_read_fu_140_p2, not_s_fu_436_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                T4_out_1_data_in <= not_s_fu_436_p2(0);
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                T4_out_1_data_in <= T4;
            else 
                T4_out_1_data_in <= 'X';
            end if;
        else 
            T4_out_1_data_in <= 'X';
        end if; 
    end process;


    T4_out_1_vld_in_assign_proc : process(ap_CS_fsm_state12, enable_read_read_fu_140_p2)
    begin
        if ((((enable_read_read_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((enable_read_read_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            T4_out_1_vld_in <= ap_const_logic_1;
        else 
            T4_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    T5_out <= T5_out_1_data_reg;

    T5_out_1_ack_in_assign_proc : process(T5_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T5_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T5_out_1_vld_reg)))) then 
            T5_out_1_ack_in <= ap_const_logic_1;
        else 
            T5_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T5_out_1_vld_in_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            T5_out_1_vld_in <= ap_const_logic_1;
        else 
            T5_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    T6_out <= T6_out_1_data_reg;

    T6_out_1_ack_in_assign_proc : process(T6_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = T6_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = T6_out_1_vld_reg)))) then 
            T6_out_1_ack_in <= ap_const_logic_1;
        else 
            T6_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    T6_out_1_vld_in_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            T6_out_1_vld_in <= ap_const_logic_1;
        else 
            T6_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    V_N_gnd_out <= V_N_gnd_out_1_data_reg;

    V_N_gnd_out_1_ack_in_assign_proc : process(V_N_gnd_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = V_N_gnd_out_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_N_gnd_out_1_vld_reg)))) then 
            V_N_gnd_out_1_ack_in <= ap_const_logic_1;
        else 
            V_N_gnd_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    V_N_gnd_out_1_vld_in_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            V_N_gnd_out_1_vld_in <= ap_const_logic_1;
        else 
            V_N_gnd_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state14_assign_proc : process(T1_out_1_ack_in, T2_out_1_ack_in, T3_out_1_ack_in, T4_out_1_ack_in, T5_out_1_ack_in, T6_out_1_ack_in, V_N_gnd_out_1_ack_in)
    begin
                ap_block_state14 <= ((ap_const_logic_0 = T2_out_1_ack_in) or (ap_const_logic_0 = T1_out_1_ack_in) or (ap_const_logic_0 = V_N_gnd_out_1_ack_in) or (ap_const_logic_0 = T6_out_1_ack_in) or (ap_const_logic_0 = T5_out_1_ack_in) or (ap_const_logic_0 = T4_out_1_ack_in) or (ap_const_logic_0 = T3_out_1_ack_in));
    end process;


    ap_done_assign_proc : process(T1_out_1_ack_in, T2_out_1_ack_in, T3_out_1_ack_in, T4_out_1_ack_in, T5_out_1_ack_in, T6_out_1_ack_in, V_N_gnd_out_1_ack_in, ap_CS_fsm_state14)
    begin
        if ((not(((ap_const_logic_0 = T2_out_1_ack_in) or (ap_const_logic_0 = T1_out_1_ack_in) or (ap_const_logic_0 = V_N_gnd_out_1_ack_in) or (ap_const_logic_0 = T6_out_1_ack_in) or (ap_const_logic_0 = T5_out_1_ack_in) or (ap_const_logic_0 = T4_out_1_ack_in) or (ap_const_logic_0 = T3_out_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge1_phi_fu_237_p4_assign_proc : process(V_N_gnd, enable_read_read_fu_140_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_phi_fu_237_p4 <= ap_const_lv32_0;
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_phi_fu_237_p4 <= V_N_gnd;
            else 
                ap_phi_mux_storemerge1_phi_fu_237_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge1_phi_fu_237_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_storemerge2_phi_fu_224_p4_assign_proc : process(T6, enable_read_read_fu_140_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge2_phi_fu_224_p4 <= ap_const_lv1_0;
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge2_phi_fu_224_p4 <= (0=>T6, others=>'-');
            else 
                ap_phi_mux_storemerge2_phi_fu_224_p4 <= "X";
            end if;
        else 
            ap_phi_mux_storemerge2_phi_fu_224_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_storemerge3_phi_fu_211_p4_assign_proc : process(T5, enable_read_read_fu_140_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
            if ((enable_read_read_fu_140_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge3_phi_fu_211_p4 <= ap_const_lv1_0;
            elsif ((enable_read_read_fu_140_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge3_phi_fu_211_p4 <= (0=>T5, others=>'-');
            else 
                ap_phi_mux_storemerge3_phi_fu_211_p4 <= "X";
            end if;
        else 
            ap_phi_mux_storemerge3_phi_fu_211_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(T1_out_1_ack_in, T2_out_1_ack_in, T3_out_1_ack_in, T4_out_1_ack_in, T5_out_1_ack_in, T6_out_1_ack_in, V_N_gnd_out_1_ack_in, ap_CS_fsm_state14)
    begin
        if ((not(((ap_const_logic_0 = T2_out_1_ack_in) or (ap_const_logic_0 = T1_out_1_ack_in) or (ap_const_logic_0 = V_N_gnd_out_1_ack_in) or (ap_const_logic_0 = T6_out_1_ack_in) or (ap_const_logic_0 = T5_out_1_ack_in) or (ap_const_logic_0 = T4_out_1_ack_in) or (ap_const_logic_0 = T3_out_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    enable_read_read_fu_140_p2 <= (0=>enable, others=>'-');
    grp_fu_251_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dutty_pot),32));
    isNeg_fu_300_p3 <= sh_assign_fu_294_p2(8 downto 8);
    loc_V_1_fu_272_p1 <= p_Val2_s_fu_259_p1(23 - 1 downto 0);
    loc_V_fu_262_p4 <= p_Val2_s_fu_259_p1(30 downto 23);
    not_s_fu_436_p2 <= (tmp_1_fu_429_p2 xor ap_const_lv1_1);
    p_Result_s_fu_410_p3 <= p_Val2_s_reg_458(31 downto 31);
    p_Val2_2_fu_372_p3 <= 
        tmp_3_fu_358_p1 when (isNeg_fu_300_p3(0) = '1') else 
        tmp_4_fu_362_p4;
    p_Val2_4_fu_422_p3 <= 
        p_Val2_6_i_i_i_fu_417_p2 when (p_Result_s_fu_410_p3(0) = '1') else 
        p_Val2_2_reg_463;
    p_Val2_6_i_i_i_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_463));
    p_Val2_s_fu_259_p1 <= x_assign_reg_453;
        sh_assign_1_cast_cas_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_318_p3),25));

        sh_assign_1_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_318_p3),32));

    sh_assign_1_fu_318_p3 <= 
        tmp_5_i_i_i_cast_fu_314_p1 when (isNeg_fu_300_p3(0) = '1') else 
        sh_assign_fu_294_p2;
    sh_assign_fu_294_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast1_fu_290_p1));
    storemerge_fu_396_p3 <= 
        ap_const_lv32_0 when (tmp_fu_384_p2(0) = '1') else 
        tmp_s_fu_390_p2;
    tmp_1_fu_429_p2 <= "1" when (signed(storemerge_fu_396_p3) < signed(p_Val2_4_fu_422_p3)) else "0";
    tmp_3_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_350_p3),32));
    tmp_3_i_i_i_cast2_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i_fu_276_p4),79));
    tmp_3_i_i_i_fu_276_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_272_p1) & ap_const_lv1_0);
    tmp_4_fu_362_p4 <= tmp_i_i_i_fu_344_p2(55 downto 24);
        tmp_5_i_i_i_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i_fu_308_p2),9));

    tmp_5_i_i_i_fu_308_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_262_p4));
    tmp_7_i_i_i_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_326_p1),79));
    tmp_8_i_i_i_fu_338_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i_fu_276_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_330_p1(25-1 downto 0)))));
    tmp_9_fu_350_p3 <= tmp_8_i_i_i_fu_338_p2(24 downto 24);
    tmp_fu_384_p2 <= "1" when (signed(counter) > signed(ap_const_lv32_199)) else "0";
    tmp_i_i_i_fu_344_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i_cast2_fu_286_p1),to_integer(unsigned('0' & tmp_7_i_i_i_fu_334_p1(31-1 downto 0)))));
    tmp_i_i_i_i_cast1_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_262_p4),9));
    tmp_s_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter));
end behav;
