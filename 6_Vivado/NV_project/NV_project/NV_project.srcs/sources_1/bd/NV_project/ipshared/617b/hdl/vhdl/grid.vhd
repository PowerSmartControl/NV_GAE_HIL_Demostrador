-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity grid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    phase_step_on : IN STD_LOGIC;
    phase_step : IN STD_LOGIC_VECTOR (31 downto 0);
    counter_limit : IN STD_LOGIC_VECTOR (31 downto 0);
    ampl_a : IN STD_LOGIC_VECTOR (31 downto 0);
    ampl_b : IN STD_LOGIC_VECTOR (31 downto 0);
    ampl_c : IN STD_LOGIC_VECTOR (31 downto 0);
    inv_seq : IN STD_LOGIC;
    proof_flag_on : IN STD_LOGIC;
    Grid_a_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Grid_b_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Grid_c_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    mod_a : OUT STD_LOGIC_VECTOR (17 downto 0);
    mod_b : OUT STD_LOGIC_VECTOR (17 downto 0);
    mod_c : OUT STD_LOGIC_VECTOR (17 downto 0);
    I_out_proof : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of grid is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "grid,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.696000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=15,HLS_SYN_FF=3310,HLS_SYN_LUT=8225}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_41155014 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000101010101000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_477FFF00 : STD_LOGIC_VECTOR (31 downto 0) := "01000111011111111111111100000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1F3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110011";
    constant ap_const_lv32_FFFFFE0D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000001101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_431783D7 : STD_LOGIC_VECTOR (31 downto 0) := "01000011000101111000001111010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Grid_a_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Grid_a_r_1_vld_reg : STD_LOGIC := '0';
    signal Grid_a_r_1_vld_in : STD_LOGIC;
    signal Grid_a_r_1_ack_in : STD_LOGIC;
    signal Grid_b_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Grid_b_r_1_vld_reg : STD_LOGIC := '0';
    signal Grid_b_r_1_vld_in : STD_LOGIC;
    signal Grid_b_r_1_ack_in : STD_LOGIC;
    signal Grid_c_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Grid_c_r_1_vld_reg : STD_LOGIC := '0';
    signal Grid_c_r_1_vld_in : STD_LOGIC;
    signal Grid_c_r_1_ack_in : STD_LOGIC;
    signal mod_a_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal mod_a_1_vld_reg : STD_LOGIC := '0';
    signal mod_a_1_vld_in : STD_LOGIC;
    signal mod_a_1_ack_in : STD_LOGIC;
    signal mod_b_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal mod_b_1_vld_reg : STD_LOGIC := '0';
    signal mod_b_1_vld_in : STD_LOGIC;
    signal mod_b_1_ack_in : STD_LOGIC;
    signal mod_c_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal mod_c_1_vld_reg : STD_LOGIC := '0';
    signal mod_c_1_vld_in : STD_LOGIC;
    signal mod_c_1_ack_in : STD_LOGIC;
    signal I_out_proof_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_out_proof_1_vld_reg : STD_LOGIC := '0';
    signal I_out_proof_1_vld_in : STD_LOGIC;
    signal I_out_proof_1_ack_in : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal index_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal index_b : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001101";
    signal index_c : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    signal flag_step : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal phase_step_on_prev : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal full_sine_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal full_sine_ce0 : STD_LOGIC;
    signal full_sine_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal full_sine_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal full_sine_ce1 : STD_LOGIC;
    signal full_sine_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal full_sine_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal full_sine_ce2 : STD_LOGIC;
    signal full_sine_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_1646 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_a_new_1_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_a_new_1_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_b_new_1_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_b_new_1_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_c_new_1_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_c_new_1_reg_1666 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_4_reg_1698 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1703 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_2_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_1719 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_1725 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_fu_918_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_reg_1730 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge5_fu_949_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge5_reg_1736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal storemerge9_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge9_reg_1743 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge8_fu_1011_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge8_reg_1750 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge7_fu_1050_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge7_reg_1757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal storemerge12_fu_1089_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge12_reg_1762 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge13_fu_1128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge13_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal full_sine_load_3_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal full_sine_load_4_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal full_sine_load_5_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal full_sine_load_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal full_sine_load_1_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal full_sine_load_2_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_reg_1847 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_5_reg_1852 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_1857 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_46_fu_1282_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_reg_1862 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_3_reg_1868 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1411_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_52_reg_1873 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_5_reg_1879 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1540_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_57_reg_1884 : STD_LOGIC_VECTOR (17 downto 0);
    signal storemerge14_fu_1548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_1557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1571_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_1583_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_42_fu_1595_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal storemerge1_fu_1602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_1144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state24 : BOOLEAN;
    signal index_a_flag_1_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond7_fu_1615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge2_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge3_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge4_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_a_loc_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_453_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_step_flag_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_step_loc_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_b_loc_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_c_loc_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_load_op_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_560_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i_fu_564_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_fu_550_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_578_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_582_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i_cast_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_606_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_618_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i_cast1_fu_574_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i_fu_622_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i_fu_626_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_43_fu_638_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i_fu_632_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_21_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_650_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_5_fu_689_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i2_fu_693_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_4_fu_679_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i2_cast8_fu_707_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_711_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i2_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i2_cast_fu_731_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_fu_735_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_cast_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_747_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i2_cast9_fu_703_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i2_fu_751_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i2_fu_755_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_62_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i2_fu_761_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_47_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_779_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_9_fu_818_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i4_fu_822_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_8_fu_808_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i4_cast4_fu_836_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_8_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i4_fu_854_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_4_fu_846_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i4_cast_fu_860_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_fu_864_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_cast_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_9_cast_cas_fu_876_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i4_cast5_fu_832_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i4_fu_880_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i4_fu_884_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_74_fu_896_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i4_fu_890_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_53_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_908_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_931_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i2_fu_957_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i4_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_993_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge6_fu_1029_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_1036_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1063_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge10_fu_1068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1075_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge11_fu_1107_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_1114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_fu_1182_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i1_fu_1186_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_2_fu_1172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast_fu_1200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_1204_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i1_fu_1218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_1210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i1_cast_fu_1224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_1228_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_1236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_1240_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i1_cast1_fu_1196_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i1_fu_1244_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i1_fu_1248_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_fu_1260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i1_fu_1254_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_39_fu_1268_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_45_fu_1272_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_12_fu_1290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_7_fu_1311_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i3_fu_1315_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_6_fu_1301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i3_cast6_fu_1329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_fu_1333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i3_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_1339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i3_cast_fu_1353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_fu_1357_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_cast_fu_1365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_7_cast_cas_fu_1369_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i3_cast7_fu_1325_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i3_fu_1373_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i3_fu_1377_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_70_fu_1389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i3_fu_1383_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_49_fu_1397_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_50_fu_1401_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_1419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_11_fu_1440_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_57_i_i_i5_fu_1444_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_10_fu_1430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i5_cast2_fu_1458_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_s_fu_1462_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_i_i_i5_fu_1476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_5_fu_1468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_i_i_i5_cast_fu_1482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_10_fu_1486_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_11_cast_fu_1494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_11_cast_ca_fu_1498_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_i_i_i5_cast3_fu_1454_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_i_i_i5_fu_1502_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_60_i_i_i5_fu_1506_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_79_fu_1518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_i_i5_fu_1512_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_55_fu_1526_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_56_fu_1530_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal storemerge14_fu_1548_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_1557_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i1_fu_1566_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_i_i_i3_fu_1578_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_i_i_i5_fu_1590_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal storemerge1_fu_1602_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component grid_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_sitofp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_full_sine IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    full_sine_U : component grid_full_sine
    generic map (
        DataWidth => 32,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => full_sine_address0,
        ce0 => full_sine_ce0,
        q0 => full_sine_q0,
        address1 => full_sine_address1,
        ce1 => full_sine_ce1,
        q1 => full_sine_q1,
        address2 => full_sine_address2,
        ce2 => full_sine_ce2,
        q2 => full_sine_q2);

    grid_fadd_32ns_32bkb_U1 : component grid_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_16_reg_1673,
        din1 => ap_const_lv32_41155014,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    grid_fadd_32ns_32bkb_U2 : component grid_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_25_reg_1678,
        din1 => ap_const_lv32_41155014,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    grid_fadd_32ns_32bkb_U3 : component grid_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_34_reg_1683,
        din1 => ap_const_lv32_41155014,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    grid_fmul_32ns_32cud_U4 : component grid_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_294_p0,
        din1 => grp_fu_294_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);

    grid_fmul_32ns_32cud_U5 : component grid_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_299_p0,
        din1 => grp_fu_299_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_299_p2);

    grid_fmul_32ns_32cud_U6 : component grid_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_304_p0,
        din1 => grp_fu_304_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_304_p2);

    grid_sitofp_32ns_dEe_U7 : component grid_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => index_a_new_1_reg_1652,
        ce => ap_const_logic_1,
        dout => grp_fu_313_p1);

    grid_sitofp_32ns_dEe_U8 : component grid_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => index_b_new_1_reg_1659,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p1);

    grid_sitofp_32ns_dEe_U9 : component grid_sitofp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => index_c_new_1_reg_1666,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Grid_a_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Grid_b_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Grid_c_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    I_out_proof_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mod_a_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mod_b_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mod_c_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Grid_a_r_1_vld_reg) and (ap_const_logic_1 = Grid_a_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_a_r_1_vld_in) and (ap_const_logic_1 = Grid_a_r_1_vld_reg)))) then
                Grid_a_r_1_data_reg <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Grid_b_r_1_vld_reg) and (ap_const_logic_1 = Grid_b_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_b_r_1_vld_in) and (ap_const_logic_1 = Grid_b_r_1_vld_reg)))) then
                Grid_b_r_1_data_reg <= storemerge14_fu_1548_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Grid_c_r_1_vld_reg) and (ap_const_logic_1 = Grid_c_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_c_r_1_vld_in) and (ap_const_logic_1 = Grid_c_r_1_vld_reg)))) then
                Grid_c_r_1_data_reg <= storemerge_fu_1557_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = I_out_proof_1_vld_reg) and (ap_const_logic_1 = I_out_proof_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = I_out_proof_1_vld_in) and (ap_const_logic_1 = I_out_proof_1_vld_reg)))) then
                    I_out_proof_1_data_reg(2 downto 0) <= storemerge1_fu_1602_p3(2 downto 0);    I_out_proof_1_data_reg(4) <= storemerge1_fu_1602_p3(4);    I_out_proof_1_data_reg(9 downto 6) <= storemerge1_fu_1602_p3(9 downto 6);    I_out_proof_1_data_reg(18 downto 15) <= storemerge1_fu_1602_p3(18 downto 15);    I_out_proof_1_data_reg(20) <= storemerge1_fu_1602_p3(20);    I_out_proof_1_data_reg(25 downto 24) <= storemerge1_fu_1602_p3(25 downto 24);    I_out_proof_1_data_reg(30) <= storemerge1_fu_1602_p3(30);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                counter <= tmp_9_fu_525_p3;
                index_a_new_1_reg_1652 <= index_a_new_1_fu_489_p3;
                index_b_new_1_reg_1659 <= index_b_new_1_fu_497_p3;
                index_c_new_1_reg_1666 <= index_c_new_1_fu_505_p3;
                or_cond7_reg_1646 <= or_cond7_fu_471_p2;
                phase_step_on_prev <= (0=>phase_step_on, others=>'-');
                tmp_reg_1641 <= tmp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in))) and (or_cond7_reg_1646 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                flag_step <= not_or_cond7_fu_1615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                full_sine_load_1_reg_1822 <= full_sine_q1;
                full_sine_load_2_reg_1827 <= full_sine_q2;
                full_sine_load_reg_1817 <= full_sine_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                full_sine_load_3_reg_1787 <= full_sine_q0;
                full_sine_load_4_reg_1792 <= full_sine_q1;
                full_sine_load_5_reg_1797 <= full_sine_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in))) and (index_a_flag_1_fu_1611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                index_a <= index_a_new_1_reg_1652;
                index_b <= index_b_new_1_reg_1659;
                index_c <= index_c_new_1_reg_1666;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mod_a_1_vld_reg = ap_const_logic_0) and (mod_a_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (mod_a_1_vld_in = ap_const_logic_1) and (mod_a_1_vld_reg = ap_const_logic_1)))) then
                mod_a_1_data_reg <= tmp_24_fu_1571_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mod_b_1_vld_reg = ap_const_logic_0) and (mod_b_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (mod_b_1_vld_in = ap_const_logic_1) and (mod_b_1_vld_reg = ap_const_logic_1)))) then
                mod_b_1_data_reg <= tmp_33_fu_1583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (mod_c_1_vld_reg = ap_const_logic_0) and (mod_c_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (mod_c_1_vld_in = ap_const_logic_1) and (mod_c_1_vld_reg = ap_const_logic_1)))) then
                mod_c_1_data_reg <= tmp_42_fu_1595_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_Result_1_reg_1857 <= p_Val2_5_fu_1160_p1(31 downto 31);
                p_Result_3_reg_1868 <= p_Val2_12_fu_1290_p1(31 downto 31);
                p_Result_5_reg_1879 <= p_Val2_19_fu_1419_p1(31 downto 31);
                tmp_46_reg_1862 <= tmp_46_fu_1282_p3;
                tmp_52_reg_1873 <= tmp_52_fu_1411_p3;
                tmp_57_reg_1884 <= tmp_57_fu_1540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_Result_2_reg_1714 <= p_Val2_7_fu_668_p1(31 downto 31);
                p_Result_4_reg_1725 <= p_Val2_14_fu_797_p1(31 downto 31);
                p_Result_s_reg_1703 <= p_Val2_s_fu_539_p1(31 downto 31);
                p_Val2_16_reg_1730 <= p_Val2_16_fu_918_p3;
                p_Val2_2_reg_1708 <= p_Val2_2_fu_660_p3;
                p_Val2_9_reg_1719 <= p_Val2_9_fu_789_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_322 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                storemerge12_reg_1762 <= storemerge12_fu_1089_p3;
                storemerge13_reg_1767 <= storemerge13_fu_1128_p3;
                storemerge7_reg_1757 <= storemerge7_fu_1050_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                storemerge5_reg_1736 <= storemerge5_fu_949_p3;
                storemerge8_reg_1750 <= storemerge8_fu_1011_p3;
                storemerge9_reg_1743 <= storemerge9_fu_980_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_16_reg_1673 <= grp_fu_313_p1;
                tmp_25_reg_1678 <= grp_fu_316_p1;
                tmp_34_reg_1683 <= grp_fu_319_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                x_assign_2_reg_1693 <= grp_fu_284_p2;
                x_assign_4_reg_1698 <= grp_fu_289_p2;
                x_assign_reg_1688 <= grp_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                x_assign_3_reg_1847 <= grp_fu_299_p2;
                x_assign_5_reg_1852 <= grp_fu_304_p2;
            end if;
        end if;
    end process;
    I_out_proof_1_data_reg(3) <= '0';
    I_out_proof_1_data_reg(5 downto 5) <= "0";
    I_out_proof_1_data_reg(14 downto 10) <= "00000";
    I_out_proof_1_data_reg(19 downto 19) <= "0";
    I_out_proof_1_data_reg(23 downto 21) <= "000";
    I_out_proof_1_data_reg(29 downto 26) <= "0000";
    I_out_proof_1_data_reg(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, Grid_a_r_1_ack_in, Grid_b_r_1_ack_in, Grid_c_r_1_ack_in, mod_a_1_ack_in, mod_b_1_ack_in, mod_c_1_ack_in, I_out_proof_1_ack_in, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if ((not(((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Grid_a_r <= Grid_a_r_1_data_reg;

    Grid_a_r_1_ack_in_assign_proc : process(Grid_a_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Grid_a_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_a_r_1_vld_reg)))) then 
            Grid_a_r_1_ack_in <= ap_const_logic_1;
        else 
            Grid_a_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Grid_a_r_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Grid_a_r_1_vld_in <= ap_const_logic_1;
        else 
            Grid_a_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Grid_b_r <= Grid_b_r_1_data_reg;

    Grid_b_r_1_ack_in_assign_proc : process(Grid_b_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Grid_b_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_b_r_1_vld_reg)))) then 
            Grid_b_r_1_ack_in <= ap_const_logic_1;
        else 
            Grid_b_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Grid_b_r_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Grid_b_r_1_vld_in <= ap_const_logic_1;
        else 
            Grid_b_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Grid_c_r <= Grid_c_r_1_data_reg;

    Grid_c_r_1_ack_in_assign_proc : process(Grid_c_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Grid_c_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Grid_c_r_1_vld_reg)))) then 
            Grid_c_r_1_ack_in <= ap_const_logic_1;
        else 
            Grid_c_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Grid_c_r_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Grid_c_r_1_vld_in <= ap_const_logic_1;
        else 
            Grid_c_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    I_out_proof <= I_out_proof_1_data_reg;

    I_out_proof_1_ack_in_assign_proc : process(I_out_proof_1_vld_reg)
    begin
        if (((ap_const_logic_0 = I_out_proof_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = I_out_proof_1_vld_reg)))) then 
            I_out_proof_1_ack_in <= ap_const_logic_1;
        else 
            I_out_proof_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    I_out_proof_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            I_out_proof_1_vld_in <= ap_const_logic_1;
        else 
            I_out_proof_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state24_assign_proc : process(Grid_a_r_1_ack_in, Grid_b_r_1_ack_in, Grid_c_r_1_ack_in, mod_a_1_ack_in, mod_b_1_ack_in, mod_c_1_ack_in, I_out_proof_1_ack_in)
    begin
                ap_block_state24 <= ((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in));
    end process;


    ap_done_assign_proc : process(Grid_a_r_1_ack_in, Grid_b_r_1_ack_in, Grid_c_r_1_ack_in, mod_a_1_ack_in, mod_b_1_ack_in, mod_c_1_ack_in, I_out_proof_1_ack_in, ap_CS_fsm_state24)
    begin
        if ((not(((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(Grid_a_r_1_ack_in, Grid_b_r_1_ack_in, Grid_c_r_1_ack_in, mod_a_1_ack_in, mod_b_1_ack_in, mod_c_1_ack_in, I_out_proof_1_ack_in, ap_CS_fsm_state24)
    begin
        if ((not(((ap_const_logic_0 = Grid_b_r_1_ack_in) or (ap_const_logic_0 = Grid_a_r_1_ack_in) or (ap_const_logic_0 = I_out_proof_1_ack_in) or (mod_c_1_ack_in = ap_const_logic_0) or (mod_b_1_ack_in = ap_const_logic_0) or (mod_a_1_ack_in = ap_const_logic_0) or (ap_const_logic_0 = Grid_c_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    counter_load_op_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter));
    flag_step_flag_fu_459_p2 <= (tmp_8_fu_447_p2 and tmp1_fu_453_p2);
    flag_step_loc_fu_465_p2 <= (flag_step_flag_fu_459_p2 or flag_step);

    full_sine_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18, tmp_23_fu_1136_p1, tmp_10_fu_1148_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            full_sine_address0 <= tmp_10_fu_1148_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            full_sine_address0 <= tmp_23_fu_1136_p1(9 - 1 downto 0);
        else 
            full_sine_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    full_sine_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18, tmp_32_fu_1140_p1, tmp_12_fu_1152_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            full_sine_address1 <= tmp_12_fu_1152_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            full_sine_address1 <= tmp_32_fu_1140_p1(9 - 1 downto 0);
        else 
            full_sine_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    full_sine_address2_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18, tmp_41_fu_1144_p1, tmp_14_fu_1156_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            full_sine_address2 <= tmp_14_fu_1156_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            full_sine_address2 <= tmp_41_fu_1144_p1(9 - 1 downto 0);
        else 
            full_sine_address2 <= "XXXXXXXXX";
        end if; 
    end process;


    full_sine_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            full_sine_ce0 <= ap_const_logic_1;
        else 
            full_sine_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    full_sine_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            full_sine_ce1 <= ap_const_logic_1;
        else 
            full_sine_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    full_sine_ce2_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            full_sine_ce2 <= ap_const_logic_1;
        else 
            full_sine_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_294_p0_assign_proc : process(full_sine_load_3_reg_1787, ap_CS_fsm_state18, full_sine_load_reg_1817, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_294_p0 <= full_sine_load_reg_1817;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_294_p0 <= full_sine_load_3_reg_1787;
        else 
            grp_fu_294_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_294_p1_assign_proc : process(ampl_a, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_294_p1 <= ampl_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_294_p1 <= ap_const_lv32_477FFF00;
        else 
            grp_fu_294_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_299_p0_assign_proc : process(full_sine_load_4_reg_1792, ap_CS_fsm_state18, full_sine_load_1_reg_1822, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_299_p0 <= full_sine_load_1_reg_1822;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_299_p0 <= full_sine_load_4_reg_1792;
        else 
            grp_fu_299_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_299_p1_assign_proc : process(ampl_b, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_299_p1 <= ampl_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_299_p1 <= ap_const_lv32_477FFF00;
        else 
            grp_fu_299_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_p0_assign_proc : process(full_sine_load_5_reg_1797, ap_CS_fsm_state18, full_sine_load_2_reg_1827, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_304_p0 <= full_sine_load_2_reg_1827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_304_p0 <= full_sine_load_5_reg_1797;
        else 
            grp_fu_304_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_p1_assign_proc : process(ampl_c, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_304_p1 <= ampl_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_304_p1 <= ap_const_lv32_477FFF00;
        else 
            grp_fu_304_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    index_a_flag_1_fu_1611_p2 <= (tmp_reg_1641 or or_cond7_reg_1646);
    index_a_loc_fu_409_p3 <= 
        storemerge2_fu_361_p3 when (tmp_fu_331_p2(0) = '1') else 
        index_a;
    index_a_new_1_fu_489_p3 <= 
        phase_step when (or_cond7_fu_471_p2(0) = '1') else 
        index_a_loc_fu_409_p3;
    index_b_loc_fu_417_p3 <= 
        storemerge3_fu_381_p3 when (tmp_fu_331_p2(0) = '1') else 
        index_b;
    index_b_new_1_fu_497_p3 <= 
        tmp_s_fu_477_p2 when (or_cond7_fu_471_p2(0) = '1') else 
        index_b_loc_fu_417_p3;
    index_c_loc_fu_425_p3 <= 
        storemerge4_fu_401_p3 when (tmp_fu_331_p2(0) = '1') else 
        index_c;
    index_c_new_1_fu_505_p3 <= 
        tmp_7_fu_483_p2 when (or_cond7_fu_471_p2(0) = '1') else 
        index_c_loc_fu_425_p3;
    isNeg_1_fu_1210_p3 <= sh_assign_2_fu_1204_p2(8 downto 8);
    isNeg_2_fu_717_p3 <= sh_assign_4_fu_711_p2(8 downto 8);
    isNeg_3_fu_1339_p3 <= sh_assign_6_fu_1333_p2(8 downto 8);
    isNeg_4_fu_846_p3 <= sh_assign_8_fu_840_p2(8 downto 8);
    isNeg_5_fu_1468_p3 <= sh_assign_s_fu_1462_p2(8 downto 8);
    isNeg_fu_588_p3 <= sh_assign_fu_582_p2(8 downto 8);
    loc_V_10_fu_1430_p4 <= p_Val2_19_fu_1419_p1(30 downto 23);
    loc_V_11_fu_1440_p1 <= p_Val2_19_fu_1419_p1(23 - 1 downto 0);
    loc_V_1_fu_560_p1 <= p_Val2_s_fu_539_p1(23 - 1 downto 0);
    loc_V_2_fu_1172_p4 <= p_Val2_5_fu_1160_p1(30 downto 23);
    loc_V_3_fu_1182_p1 <= p_Val2_5_fu_1160_p1(23 - 1 downto 0);
    loc_V_4_fu_679_p4 <= p_Val2_7_fu_668_p1(30 downto 23);
    loc_V_5_fu_689_p1 <= p_Val2_7_fu_668_p1(23 - 1 downto 0);
    loc_V_6_fu_1301_p4 <= p_Val2_12_fu_1290_p1(30 downto 23);
    loc_V_7_fu_1311_p1 <= p_Val2_12_fu_1290_p1(23 - 1 downto 0);
    loc_V_8_fu_808_p4 <= p_Val2_14_fu_797_p1(30 downto 23);
    loc_V_9_fu_818_p1 <= p_Val2_14_fu_797_p1(23 - 1 downto 0);
    loc_V_fu_550_p4 <= p_Val2_s_fu_539_p1(30 downto 23);
    mod_a <= mod_a_1_data_reg;

    mod_a_1_ack_in_assign_proc : process(mod_a_1_vld_reg)
    begin
        if (((mod_a_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (mod_a_1_vld_reg = ap_const_logic_1)))) then 
            mod_a_1_ack_in <= ap_const_logic_1;
        else 
            mod_a_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    mod_a_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mod_a_1_vld_in <= ap_const_logic_1;
        else 
            mod_a_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mod_b <= mod_b_1_data_reg;

    mod_b_1_ack_in_assign_proc : process(mod_b_1_vld_reg)
    begin
        if (((mod_b_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (mod_b_1_vld_reg = ap_const_logic_1)))) then 
            mod_b_1_ack_in <= ap_const_logic_1;
        else 
            mod_b_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    mod_b_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mod_b_1_vld_in <= ap_const_logic_1;
        else 
            mod_b_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mod_c <= mod_c_1_data_reg;

    mod_c_1_ack_in_assign_proc : process(mod_c_1_vld_reg)
    begin
        if (((mod_c_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (mod_c_1_vld_reg = ap_const_logic_1)))) then 
            mod_c_1_ack_in <= ap_const_logic_1;
        else 
            mod_c_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    mod_c_1_vld_in_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mod_c_1_vld_in <= ap_const_logic_1;
        else 
            mod_c_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    not_or_cond7_fu_1615_p2 <= (or_cond7_reg_1646 xor ap_const_lv1_1);
    or_cond7_fu_471_p2 <= (tmp_8_fu_447_p2 and flag_step_loc_fu_465_p2);
    p_Val2_11_fu_962_p3 <= 
        p_Val2_6_i_i_i2_fu_957_p2 when (p_Result_2_reg_1714(0) = '1') else 
        p_Val2_9_reg_1719;
    p_Val2_12_fu_1290_p1 <= x_assign_3_reg_1847;
    p_Val2_14_fu_797_p1 <= x_assign_4_reg_1698;
    p_Val2_16_fu_918_p3 <= 
        tmp_53_fu_904_p1 when (isNeg_4_fu_846_p3(0) = '1') else 
        tmp_54_fu_908_p4;
    p_Val2_18_fu_993_p3 <= 
        p_Val2_6_i_i_i4_fu_988_p2 when (p_Result_4_reg_1725(0) = '1') else 
        p_Val2_16_reg_1730;
    p_Val2_19_fu_1419_p1 <= x_assign_5_reg_1852;
    p_Val2_2_fu_660_p3 <= 
        tmp_21_fu_646_p1 when (isNeg_fu_588_p3(0) = '1') else 
        tmp_30_fu_650_p4;
    p_Val2_4_fu_931_p3 <= 
        p_Val2_6_i_i_i_fu_926_p2 when (p_Result_s_reg_1703(0) = '1') else 
        p_Val2_2_reg_1708;
    p_Val2_5_fu_1160_p1 <= reg_322;
    p_Val2_6_i_i_i1_fu_1566_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_46_reg_1862));
    p_Val2_6_i_i_i2_fu_957_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_reg_1719));
    p_Val2_6_i_i_i3_fu_1578_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_52_reg_1873));
    p_Val2_6_i_i_i4_fu_988_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_16_reg_1730));
    p_Val2_6_i_i_i5_fu_1590_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_57_reg_1884));
    p_Val2_6_i_i_i_fu_926_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_1708));
    p_Val2_7_fu_668_p1 <= x_assign_2_reg_1693;
    p_Val2_9_fu_789_p3 <= 
        tmp_47_fu_775_p1 when (isNeg_2_fu_717_p3(0) = '1') else 
        tmp_48_fu_779_p4;
    p_Val2_s_fu_539_p1 <= x_assign_reg_1688;
    p_not_fu_441_p2 <= (phase_step_on_prev xor ap_const_lv1_1);
    sh_assign_10_fu_1486_p3 <= 
        tmp_58_i_i_i5_cast_fu_1482_p1 when (isNeg_5_fu_1468_p3(0) = '1') else 
        sh_assign_s_fu_1462_p2;
        sh_assign_11_cast_ca_fu_1498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_10_fu_1486_p3),25));

        sh_assign_11_cast_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_10_fu_1486_p3),32));

        sh_assign_1_cast_cas_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_606_p3),25));

        sh_assign_1_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_606_p3),32));

    sh_assign_1_fu_606_p3 <= 
        tmp_58_i_i_i_cast_fu_602_p1 when (isNeg_fu_588_p3(0) = '1') else 
        sh_assign_fu_582_p2;
    sh_assign_2_fu_1204_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast_fu_1200_p1));
        sh_assign_3_cast_cas_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_1228_p3),25));

        sh_assign_3_cast_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_1228_p3),32));

    sh_assign_3_fu_1228_p3 <= 
        tmp_58_i_i_i1_cast_fu_1224_p1 when (isNeg_1_fu_1210_p3(0) = '1') else 
        sh_assign_2_fu_1204_p2;
    sh_assign_4_fu_711_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast8_fu_707_p1));
        sh_assign_5_cast_cas_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_735_p3),25));

        sh_assign_5_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_735_p3),32));

    sh_assign_5_fu_735_p3 <= 
        tmp_58_i_i_i2_cast_fu_731_p1 when (isNeg_2_fu_717_p3(0) = '1') else 
        sh_assign_4_fu_711_p2;
    sh_assign_6_fu_1333_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i3_cast6_fu_1329_p1));
        sh_assign_7_cast_cas_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1357_p3),25));

        sh_assign_7_cast_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_1357_p3),32));

    sh_assign_7_fu_1357_p3 <= 
        tmp_58_i_i_i3_cast_fu_1353_p1 when (isNeg_3_fu_1339_p3(0) = '1') else 
        sh_assign_6_fu_1333_p2;
    sh_assign_8_fu_840_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i4_cast4_fu_836_p1));
        sh_assign_9_cast_cas_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_864_p3),25));

        sh_assign_9_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_864_p3),32));

    sh_assign_9_fu_864_p3 <= 
        tmp_58_i_i_i4_cast_fu_860_p1 when (isNeg_4_fu_846_p3(0) = '1') else 
        sh_assign_8_fu_840_p2;
    sh_assign_fu_582_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_578_p1));
    sh_assign_s_fu_1462_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i5_cast2_fu_1458_p1));
    storemerge10_fu_1068_p3 <= 
        tmp_29_fu_1063_p2 when (tmp_28_fu_1058_p2(0) = '1') else 
        storemerge9_reg_1743;
    storemerge11_fu_1107_p3 <= 
        tmp_38_fu_1102_p2 when (tmp_37_fu_1097_p2(0) = '1') else 
        storemerge8_reg_1750;
    storemerge12_fu_1089_p3 <= 
        tmp_31_fu_1083_p2 when (tmp_63_fu_1075_p3(0) = '1') else 
        storemerge10_fu_1068_p3;
    storemerge13_fu_1128_p3 <= 
        tmp_40_fu_1122_p2 when (tmp_75_fu_1114_p3(0) = '1') else 
        storemerge11_fu_1107_p3;
    storemerge14_fu_1548_p0 <= (0=>inv_seq, others=>'-');
    storemerge14_fu_1548_p3 <= 
        grp_fu_304_p2 when (storemerge14_fu_1548_p0(0) = '1') else 
        grp_fu_299_p2;
    storemerge1_fu_1602_p0 <= (0=>proof_flag_on, others=>'-');
    storemerge1_fu_1602_p3 <= 
        ap_const_lv32_431783D7 when (storemerge1_fu_1602_p0(0) = '1') else 
        ap_const_lv32_0;
    storemerge2_fu_361_p3 <= 
        ap_const_lv32_0 when (tmp_1_fu_349_p2(0) = '1') else 
        tmp_2_fu_355_p2;
    storemerge3_fu_381_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_369_p2(0) = '1') else 
        tmp_4_fu_375_p2;
    storemerge4_fu_401_p3 <= 
        ap_const_lv32_0 when (tmp_5_fu_389_p2(0) = '1') else 
        tmp_6_fu_395_p2;
    storemerge5_fu_949_p3 <= 
        tmp_18_fu_943_p2 when (tmp_17_fu_937_p2(0) = '1') else 
        p_Val2_4_fu_931_p3;
    storemerge6_fu_1029_p3 <= 
        tmp_20_fu_1024_p2 when (tmp_19_fu_1019_p2(0) = '1') else 
        storemerge5_reg_1736;
    storemerge7_fu_1050_p3 <= 
        tmp_22_fu_1044_p2 when (tmp_44_fu_1036_p3(0) = '1') else 
        storemerge6_fu_1029_p3;
    storemerge8_fu_1011_p3 <= 
        tmp_36_fu_1005_p2 when (tmp_35_fu_999_p2(0) = '1') else 
        p_Val2_18_fu_993_p3;
    storemerge9_fu_980_p3 <= 
        tmp_27_fu_974_p2 when (tmp_26_fu_968_p2(0) = '1') else 
        p_Val2_11_fu_962_p3;
    storemerge_fu_1557_p0 <= (0=>inv_seq, others=>'-');
    storemerge_fu_1557_p3 <= 
        grp_fu_299_p2 when (storemerge_fu_1557_p0(0) = '1') else 
        grp_fu_304_p2;
    tmp1_fu_453_p0 <= (0=>phase_step_on, others=>'-');
    tmp1_fu_453_p2 <= (tmp1_fu_453_p0 and p_not_fu_441_p2);
        tmp_10_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_a_new_1_reg_1652),64));

        tmp_12_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_b_new_1_reg_1659),64));

        tmp_14_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_c_new_1_reg_1666),64));

    tmp_17_fu_937_p2 <= "1" when (signed(p_Val2_4_fu_931_p3) > signed(ap_const_lv32_1F3)) else "0";
    tmp_18_fu_943_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(p_Val2_4_fu_931_p3));
    tmp_19_fu_1019_p2 <= "1" when (signed(storemerge5_reg_1736) > signed(ap_const_lv32_1F3)) else "0";
    tmp_1_fu_349_p2 <= "1" when (signed(index_a) > signed(ap_const_lv32_1F2)) else "0";
    tmp_20_fu_1024_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(storemerge5_reg_1736));
    tmp_21_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_638_p3),32));
    tmp_22_fu_1044_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F3) + unsigned(storemerge6_fu_1029_p3));
        tmp_23_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(storemerge7_reg_1757),64));

    tmp_24_fu_1571_p3 <= 
        p_Val2_6_i_i_i1_fu_1566_p2 when (p_Result_1_reg_1857(0) = '1') else 
        tmp_46_reg_1862;
    tmp_26_fu_968_p2 <= "1" when (signed(p_Val2_11_fu_962_p3) > signed(ap_const_lv32_1F3)) else "0";
    tmp_27_fu_974_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(p_Val2_11_fu_962_p3));
    tmp_28_fu_1058_p2 <= "1" when (signed(storemerge9_reg_1743) > signed(ap_const_lv32_1F3)) else "0";
    tmp_29_fu_1063_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(storemerge9_reg_1743));
    tmp_2_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(index_a));
    tmp_30_fu_650_p4 <= tmp_61_i_i_i_fu_632_p2(55 downto 24);
    tmp_31_fu_1083_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F3) + unsigned(storemerge10_fu_1068_p3));
        tmp_32_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(storemerge12_reg_1762),64));

    tmp_33_fu_1583_p3 <= 
        p_Val2_6_i_i_i3_fu_1578_p2 when (p_Result_3_reg_1868(0) = '1') else 
        tmp_52_reg_1873;
    tmp_35_fu_999_p2 <= "1" when (signed(p_Val2_18_fu_993_p3) > signed(ap_const_lv32_1F3)) else "0";
    tmp_36_fu_1005_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(p_Val2_18_fu_993_p3));
    tmp_37_fu_1097_p2 <= "1" when (signed(storemerge8_reg_1750) > signed(ap_const_lv32_1F3)) else "0";
    tmp_38_fu_1102_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFE0D) + signed(storemerge8_reg_1750));
    tmp_39_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1260_p3),18));
    tmp_3_fu_369_p2 <= "1" when (signed(index_b) > signed(ap_const_lv32_1F2)) else "0";
    tmp_40_fu_1122_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F3) + unsigned(storemerge11_fu_1107_p3));
        tmp_41_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(storemerge13_reg_1767),64));

    tmp_42_fu_1595_p3 <= 
        p_Val2_6_i_i_i5_fu_1590_p2 when (p_Result_5_reg_1879(0) = '1') else 
        tmp_57_reg_1884;
    tmp_43_fu_638_p3 <= tmp_60_i_i_i_fu_626_p2(24 downto 24);
    tmp_44_fu_1036_p3 <= storemerge6_fu_1029_p3(31 downto 31);
    tmp_45_fu_1272_p4 <= tmp_61_i_i_i1_fu_1254_p2(41 downto 24);
    tmp_46_fu_1282_p3 <= 
        tmp_39_fu_1268_p1 when (isNeg_1_fu_1210_p3(0) = '1') else 
        tmp_45_fu_1272_p4;
    tmp_47_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_767_p3),32));
    tmp_48_fu_779_p4 <= tmp_61_i_i_i2_fu_761_p2(55 downto 24);
    tmp_49_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_1389_p3),18));
    tmp_4_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(index_b));
    tmp_50_fu_1401_p4 <= tmp_61_i_i_i3_fu_1383_p2(41 downto 24);
    tmp_51_fu_1260_p3 <= tmp_60_i_i_i1_fu_1248_p2(24 downto 24);
    tmp_52_fu_1411_p3 <= 
        tmp_49_fu_1397_p1 when (isNeg_3_fu_1339_p3(0) = '1') else 
        tmp_50_fu_1401_p4;
    tmp_53_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_896_p3),32));
    tmp_54_fu_908_p4 <= tmp_61_i_i_i4_fu_890_p2(55 downto 24);
    tmp_55_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_1518_p3),18));
    tmp_56_fu_1530_p4 <= tmp_61_i_i_i5_fu_1512_p2(41 downto 24);
    tmp_57_fu_1540_p3 <= 
        tmp_55_fu_1526_p1 when (isNeg_5_fu_1468_p3(0) = '1') else 
        tmp_56_fu_1530_p4;
    tmp_57_i_i_i1_cast1_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i1_fu_1186_p4),79));
    tmp_57_i_i_i1_fu_1186_p4 <= ((ap_const_lv1_1 & loc_V_3_fu_1182_p1) & ap_const_lv1_0);
    tmp_57_i_i_i2_cast9_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i2_fu_693_p4),79));
    tmp_57_i_i_i2_fu_693_p4 <= ((ap_const_lv1_1 & loc_V_5_fu_689_p1) & ap_const_lv1_0);
    tmp_57_i_i_i3_cast7_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i3_fu_1315_p4),79));
    tmp_57_i_i_i3_fu_1315_p4 <= ((ap_const_lv1_1 & loc_V_7_fu_1311_p1) & ap_const_lv1_0);
    tmp_57_i_i_i4_cast5_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i4_fu_822_p4),79));
    tmp_57_i_i_i4_fu_822_p4 <= ((ap_const_lv1_1 & loc_V_9_fu_818_p1) & ap_const_lv1_0);
    tmp_57_i_i_i5_cast3_fu_1454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i5_fu_1444_p4),79));
    tmp_57_i_i_i5_fu_1444_p4 <= ((ap_const_lv1_1 & loc_V_11_fu_1440_p1) & ap_const_lv1_0);
    tmp_57_i_i_i_cast1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_i_i_fu_564_p4),79));
    tmp_57_i_i_i_fu_564_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_560_p1) & ap_const_lv1_0);
        tmp_58_i_i_i1_cast_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i1_fu_1218_p2),9));

    tmp_58_i_i_i1_fu_1218_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_1172_p4));
        tmp_58_i_i_i2_cast_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i2_fu_725_p2),9));

    tmp_58_i_i_i2_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_4_fu_679_p4));
        tmp_58_i_i_i3_cast_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i3_fu_1347_p2),9));

    tmp_58_i_i_i3_fu_1347_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_6_fu_1301_p4));
        tmp_58_i_i_i4_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i4_fu_854_p2),9));

    tmp_58_i_i_i4_fu_854_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_8_fu_808_p4));
        tmp_58_i_i_i5_cast_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i5_fu_1476_p2),9));

    tmp_58_i_i_i5_fu_1476_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_10_fu_1430_p4));
        tmp_58_i_i_i_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_i_i_i_fu_596_p2),9));

    tmp_58_i_i_i_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_550_p4));
    tmp_59_i_i_i1_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1236_p1),79));
    tmp_59_i_i_i2_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_743_p1),79));
    tmp_59_i_i_i3_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_1365_p1),79));
    tmp_59_i_i_i4_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_872_p1),79));
    tmp_59_i_i_i5_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_11_cast_fu_1494_p1),79));
    tmp_59_i_i_i_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_614_p1),79));
    tmp_5_fu_389_p2 <= "1" when (signed(index_c) > signed(ap_const_lv32_1F2)) else "0";
    tmp_60_i_i_i1_fu_1248_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i1_fu_1186_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_1240_p1(25-1 downto 0)))));
    tmp_60_i_i_i2_fu_755_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i2_fu_693_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_747_p1(25-1 downto 0)))));
    tmp_60_i_i_i3_fu_1377_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i3_fu_1315_p4),to_integer(unsigned('0' & sh_assign_7_cast_cas_fu_1369_p1(25-1 downto 0)))));
    tmp_60_i_i_i4_fu_884_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i4_fu_822_p4),to_integer(unsigned('0' & sh_assign_9_cast_cas_fu_876_p1(25-1 downto 0)))));
    tmp_60_i_i_i5_fu_1506_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i5_fu_1444_p4),to_integer(unsigned('0' & sh_assign_11_cast_ca_fu_1498_p1(25-1 downto 0)))));
    tmp_60_i_i_i_fu_626_p2 <= std_logic_vector(shift_right(unsigned(tmp_57_i_i_i_fu_564_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_618_p1(25-1 downto 0)))));
    tmp_61_i_i_i1_fu_1254_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i1_cast1_fu_1196_p1),to_integer(unsigned('0' & tmp_59_i_i_i1_fu_1244_p1(31-1 downto 0)))));
    tmp_61_i_i_i2_fu_761_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i2_cast9_fu_703_p1),to_integer(unsigned('0' & tmp_59_i_i_i2_fu_751_p1(31-1 downto 0)))));
    tmp_61_i_i_i3_fu_1383_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i3_cast7_fu_1325_p1),to_integer(unsigned('0' & tmp_59_i_i_i3_fu_1373_p1(31-1 downto 0)))));
    tmp_61_i_i_i4_fu_890_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i4_cast5_fu_832_p1),to_integer(unsigned('0' & tmp_59_i_i_i4_fu_880_p1(31-1 downto 0)))));
    tmp_61_i_i_i5_fu_1512_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i5_cast3_fu_1454_p1),to_integer(unsigned('0' & tmp_59_i_i_i5_fu_1502_p1(31-1 downto 0)))));
    tmp_61_i_i_i_fu_632_p2 <= std_logic_vector(shift_left(unsigned(tmp_57_i_i_i_cast1_fu_574_p1),to_integer(unsigned('0' & tmp_59_i_i_i_fu_622_p1(31-1 downto 0)))));
    tmp_62_fu_767_p3 <= tmp_60_i_i_i2_fu_755_p2(24 downto 24);
    tmp_63_fu_1075_p3 <= storemerge10_fu_1068_p3(31 downto 31);
    tmp_6_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(index_c));
    tmp_70_fu_1389_p3 <= tmp_60_i_i_i3_fu_1377_p2(24 downto 24);
    tmp_74_fu_896_p3 <= tmp_60_i_i_i4_fu_884_p2(24 downto 24);
    tmp_75_fu_1114_p3 <= storemerge11_fu_1107_p3(31 downto 31);
    tmp_79_fu_1518_p3 <= tmp_60_i_i_i5_fu_1506_p2(24 downto 24);
    tmp_7_fu_483_p2 <= std_logic_vector(unsigned(index_c_loc_fu_425_p3) + unsigned(phase_step));
    tmp_8_fu_447_p2 <= "1" when (index_a_loc_fu_409_p3 = ap_const_lv32_0) else "0";
    tmp_9_fu_525_p3 <= 
        ap_const_lv32_1 when (tmp_fu_331_p2(0) = '1') else 
        counter_load_op_fu_519_p2;
    tmp_fu_331_p2 <= "1" when (signed(counter) > signed(counter_limit)) else "0";
    tmp_i_i_i_i1_cast_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_1172_p4),9));
    tmp_i_i_i_i2_cast8_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_679_p4),9));
    tmp_i_i_i_i3_cast6_fu_1329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_6_fu_1301_p4),9));
    tmp_i_i_i_i4_cast4_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_8_fu_808_p4),9));
    tmp_i_i_i_i5_cast2_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_10_fu_1430_p4),9));
    tmp_i_i_i_i_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_550_p4),9));
    tmp_s_fu_477_p2 <= std_logic_vector(unsigned(index_b_loc_fu_417_p3) + unsigned(phase_step));
end behav;
