-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bridge3ph is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    T1 : IN STD_LOGIC;
    T2 : IN STD_LOGIC;
    T3 : IN STD_LOGIC;
    T4 : IN STD_LOGIC;
    T5 : IN STD_LOGIC;
    T6 : IN STD_LOGIC;
    Vdc_V : IN STD_LOGIC_VECTOR (17 downto 0);
    Ia_V : IN STD_LOGIC_VECTOR (24 downto 0);
    Ib_V : IN STD_LOGIC_VECTOR (24 downto 0);
    Ic_V : IN STD_LOGIC_VECTOR (24 downto 0);
    Va_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    Vb_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    Vc_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    Idc_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    Vn_gnd_V : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of bridge3ph is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bridge3ph,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.468937,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=604,HLS_SYN_LUT=2218}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv18_280 : STD_LOGIC_VECTOR (17 downto 0) := "000000001010000000";
    constant ap_const_lv19_40 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_40 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv25_FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "0111111111111111111111111";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv18_C800 : STD_LOGIC_VECTOR (17 downto 0) := "001100100000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal counter_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal Va_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal Vb_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal Vc_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal Vn_gnd_aux_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal tmp_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_s_fu_451_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal this_assign_s_reg_1066 : STD_LOGIC_VECTOR (24 downto 0);
    signal this_assign_1_1_fu_535_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal this_assign_1_1_reg_1071 : STD_LOGIC_VECTOR (24 downto 0);
    signal this_assign_2_1_fu_619_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal this_assign_2_1_reg_1076 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_12_fu_789_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_12_reg_1081 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_15_fu_799_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_15_reg_1086 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_16_fu_813_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_16_reg_1091 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp9_fu_825_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp9_reg_1096 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_0_fu_838_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_0_reg_1101 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_19_fu_893_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_19_reg_1106 : STD_LOGIC_VECTOR (24 downto 0);
    signal overflow_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_reg_1118 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bridge_fu_219_ap_start : STD_LOGIC;
    signal grp_bridge_fu_219_ap_done : STD_LOGIC;
    signal grp_bridge_fu_219_ap_idle : STD_LOGIC;
    signal grp_bridge_fu_219_ap_ready : STD_LOGIC;
    signal grp_bridge_fu_219_Va_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_bridge_fu_219_Va_aux_V_1_ap_vld : STD_LOGIC;
    signal grp_bridge_fu_219_Vb_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_bridge_fu_219_Vb_aux_V_1_ap_vld : STD_LOGIC;
    signal grp_bridge_fu_219_Vc_aux_V_1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_bridge_fu_219_Vc_aux_V_1_ap_vld : STD_LOGIC;
    signal grp_bridge_fu_219_Vn_gnd_aux_V : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_bridge_fu_219_Vn_gnd_aux_V_ap_vld : STD_LOGIC;
    signal ap_reg_grp_bridge_fu_219_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal storemerge_fu_361_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_21_i_fu_991_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal Idc_V_preg : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal tmp_cast_fu_257_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_1_fu_261_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_2_fu_275_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal isneg_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_6_fu_327_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal underflow_not_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_mux_fu_319_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sel_tmp_fu_341_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal OP1_V_fu_375_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_3_fu_379_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal newsignbit_1_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_not_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_393_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal underflow_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_mux_fu_435_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_1_7_fu_443_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal OP1_V_1_fu_459_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_5_fu_463_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal newsignbit_2_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_fu_469_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_not_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_477_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal underflow_2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge6_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_19_mux_fu_519_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_2_8_fu_527_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal OP1_V_2_fu_543_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_7_fu_547_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal newsignbit_3_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_3_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_3_not_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_561_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal underflow_3_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge7_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_mux_fu_603_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_3_9_fu_611_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal brmerge_i8_fu_627_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i8_fu_627_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i8_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_639_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_not_i_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_653_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_653_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_not_i_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_i_fu_679_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_i_fu_679_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_i_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_not_i_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_cast_fu_705_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_cast_fu_705_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_9_fu_713_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_op_assign_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_cast_fu_723_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_10_fu_731_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_9_cast_fu_719_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_10_cast_fu_737_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_i_cast_fu_747_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_cast_fu_747_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal addconv_i_fu_741_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Val2_11_fu_755_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_cast_fu_761_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_i_cast_fu_765_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_op_assign_1_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_cast_fu_781_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_13_fu_775_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_9_i_cast_cast_fu_795_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_op_assign_2_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_cast_fu_805_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp8_fu_819_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_fu_769_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sel_tmp4_fu_831_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_i_cast_fu_849_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_cast_fu_849_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_14_fu_856_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_14_cast_fu_846_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_14_i_cast_fu_861_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_17_fu_865_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_17_i_cast_cast_fu_871_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_18_fu_874_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp7_fu_888_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_6_fu_906_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal newsignbit_4_fu_898_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_4_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i9_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_i_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge4_i_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_mux_i_fu_978_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_i_fu_985_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component bridge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        T1 : IN STD_LOGIC;
        T2 : IN STD_LOGIC;
        T3 : IN STD_LOGIC;
        T4 : IN STD_LOGIC;
        T5 : IN STD_LOGIC;
        T6 : IN STD_LOGIC;
        Vdc_V : IN STD_LOGIC_VECTOR (17 downto 0);
        Ia_V : IN STD_LOGIC_VECTOR (24 downto 0);
        Ib_V : IN STD_LOGIC_VECTOR (24 downto 0);
        Ic_V : IN STD_LOGIC_VECTOR (24 downto 0);
        Va_aux_V_1 : OUT STD_LOGIC_VECTOR (24 downto 0);
        Va_aux_V_1_ap_vld : OUT STD_LOGIC;
        Vb_aux_V_1 : OUT STD_LOGIC_VECTOR (24 downto 0);
        Vb_aux_V_1_ap_vld : OUT STD_LOGIC;
        Vc_aux_V_1 : OUT STD_LOGIC_VECTOR (24 downto 0);
        Vc_aux_V_1_ap_vld : OUT STD_LOGIC;
        Vn_gnd_aux_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        Vn_gnd_aux_V_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_bridge_fu_219 : component bridge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bridge_fu_219_ap_start,
        ap_done => grp_bridge_fu_219_ap_done,
        ap_idle => grp_bridge_fu_219_ap_idle,
        ap_ready => grp_bridge_fu_219_ap_ready,
        T1 => T1,
        T2 => T2,
        T3 => T3,
        T4 => T4,
        T5 => T5,
        T6 => T6,
        Vdc_V => p_0_reg_1101,
        Ia_V => this_assign_s_reg_1066,
        Ib_V => this_assign_1_1_reg_1071,
        Ic_V => this_assign_2_1_reg_1076,
        Va_aux_V_1 => grp_bridge_fu_219_Va_aux_V_1,
        Va_aux_V_1_ap_vld => grp_bridge_fu_219_Va_aux_V_1_ap_vld,
        Vb_aux_V_1 => grp_bridge_fu_219_Vb_aux_V_1,
        Vb_aux_V_1_ap_vld => grp_bridge_fu_219_Vb_aux_V_1_ap_vld,
        Vc_aux_V_1 => grp_bridge_fu_219_Vc_aux_V_1,
        Vc_aux_V_1_ap_vld => grp_bridge_fu_219_Vc_aux_V_1_ap_vld,
        Vn_gnd_aux_V => grp_bridge_fu_219_Vn_gnd_aux_V,
        Vn_gnd_aux_V_ap_vld => grp_bridge_fu_219_Vn_gnd_aux_V_ap_vld);





    Idc_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                Idc_V_preg <= ap_const_lv25_0;
            else
                if (((grp_bridge_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    Idc_V_preg <= tmp_21_i_fu_991_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_bridge_fu_219_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_bridge_fu_219_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_reg_grp_bridge_fu_219_ap_start <= ap_const_logic_1;
                elsif ((grp_bridge_fu_219_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_bridge_fu_219_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bridge_fu_219_Va_aux_V_1_ap_vld = ap_const_logic_1))) then
                Va_aux_V_1 <= grp_bridge_fu_219_Va_aux_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bridge_fu_219_Vb_aux_V_1_ap_vld = ap_const_logic_1))) then
                Vb_aux_V_1 <= grp_bridge_fu_219_Vb_aux_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bridge_fu_219_Vc_aux_V_1_ap_vld = ap_const_logic_1))) then
                Vc_aux_V_1 <= grp_bridge_fu_219_Vc_aux_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bridge_fu_219_Vn_gnd_aux_V_ap_vld = ap_const_logic_1))) then
                Vn_gnd_aux_V <= grp_bridge_fu_219_Vn_gnd_aux_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                counter_V <= storemerge_fu_361_p3;
                p_Val2_12_reg_1081 <= p_Val2_12_fu_789_p2;
                p_Val2_15_reg_1086 <= p_Val2_15_fu_799_p2;
                p_Val2_16_reg_1091 <= p_Val2_16_fu_813_p2;
                sel_tmp2_reg_1061 <= sel_tmp2_fu_355_p2;
                this_assign_1_1_reg_1071 <= this_assign_1_1_fu_535_p3;
                this_assign_2_1_reg_1076 <= this_assign_2_1_fu_619_p3;
                this_assign_s_reg_1066 <= this_assign_s_fu_451_p3;
                tmp9_reg_1096 <= tmp9_fu_825_p2;
                tmp_reg_1056 <= tmp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                overflow_reg_1112 <= overflow_fu_934_p2;
                p_0_reg_1101 <= p_0_fu_838_p3;
                p_Val2_19_reg_1106 <= p_Val2_19_fu_893_p2;
                underflow_4_reg_1118 <= underflow_4_fu_958_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_bridge_fu_219_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_bridge_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    Idc_V_assign_proc : process(grp_bridge_fu_219_ap_done, ap_CS_fsm_state3, tmp_21_i_fu_991_p3, Idc_V_preg)
    begin
        if (((grp_bridge_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Idc_V <= tmp_21_i_fu_991_p3;
        else 
            Idc_V <= Idc_V_preg;
        end if; 
    end process;

        OP1_V_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ib_V),26));

        OP1_V_2_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ic_V),26));

        OP1_V_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ia_V),26));

    Va_V <= Va_aux_V_1;
    Vb_V <= Vb_aux_V_1;
    Vc_V <= Vc_aux_V_1;
    Vn_gnd_V <= Vn_gnd_aux_V;
    addconv_i_fu_741_p2 <= std_logic_vector(signed(p_Val2_9_cast_fu_719_p1) + signed(p_Val2_10_cast_fu_737_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge1_i_fu_653_p0 <= (0=>T2, others=>'-');
    brmerge1_i_fu_653_p1 <= (0=>T5, others=>'-');
    brmerge1_i_fu_653_p2 <= (brmerge1_i_fu_653_p1 or brmerge1_i_fu_653_p0);
    brmerge1_not_i_fu_659_p2 <= (brmerge1_i_fu_653_p2 xor ap_const_lv1_1);
    brmerge2_i_fu_679_p0 <= (0=>T3, others=>'-');
    brmerge2_i_fu_679_p1 <= (0=>T6, others=>'-');
    brmerge2_i_fu_679_p2 <= (brmerge2_i_fu_679_p1 or brmerge2_i_fu_679_p0);
    brmerge2_not_i_fu_685_p2 <= (brmerge2_i_fu_679_p2 xor ap_const_lv1_1);
    brmerge39_i_i_fu_952_p2 <= (p_not38_i_i_fu_946_p2 or newsignbit_0_not_i_i_fu_940_p2);
    brmerge4_i_fu_973_p2 <= (underflow_not_i_fu_968_p2 or overflow_reg_1112);
    brmerge5_fu_429_p2 <= (newsignbit_1_fu_397_p3 or isneg_1_not_fu_423_p2);
    brmerge6_fu_513_p2 <= (newsignbit_2_fu_481_p3 or isneg_2_not_fu_507_p2);
    brmerge7_fu_597_p2 <= (newsignbit_3_fu_565_p3 or isneg_3_not_fu_591_p2);
    brmerge_i8_fu_627_p0 <= (0=>T1, others=>'-');
    brmerge_i8_fu_627_p1 <= (0=>T4, others=>'-');
    brmerge_i8_fu_627_p2 <= (brmerge_i8_fu_627_p1 or brmerge_i8_fu_627_p0);
    brmerge_i_i1_fu_417_p2 <= (newsignbit_1_fu_397_p3 xor isneg_1_fu_385_p3);
    brmerge_i_i2_fu_501_p2 <= (newsignbit_2_fu_481_p3 xor isneg_2_fu_469_p3);
    brmerge_i_i3_fu_585_p2 <= (newsignbit_3_fu_565_p3 xor isneg_3_fu_553_p3);
    brmerge_i_i9_fu_922_p2 <= (p_not_i_i_fu_916_p2 or newsignbit_4_fu_898_p3);
    brmerge_i_i_fu_307_p2 <= (newsignbit_fu_281_p3 xor isneg_fu_267_p3);
    brmerge_i_i_i_fu_964_p2 <= (underflow_4_reg_1118 or overflow_reg_1112);
    brmerge_not_i_fu_633_p2 <= (brmerge_i8_fu_627_p2 xor ap_const_lv1_1);
    grp_bridge_fu_219_ap_start <= ap_reg_grp_bridge_fu_219_ap_start;
    i_op_assign_1_fu_673_p2 <= (tmp_20_fu_665_p3 and brmerge1_not_i_fu_659_p2);
    i_op_assign_2_fu_699_p2 <= (tmp_21_fu_691_p3 and brmerge2_not_i_fu_685_p2);
    i_op_assign_fu_647_p2 <= (tmp_19_fu_639_p3 and brmerge_not_i_fu_633_p2);
    isneg_1_fu_385_p3 <= p_Val2_3_fu_379_p2(25 downto 25);
    isneg_1_not_fu_423_p2 <= (isneg_1_fu_385_p3 xor ap_const_lv1_1);
    isneg_2_fu_469_p3 <= p_Val2_5_fu_463_p2(25 downto 25);
    isneg_2_not_fu_507_p2 <= (isneg_2_fu_469_p3 xor ap_const_lv1_1);
    isneg_3_fu_553_p3 <= p_Val2_7_fu_547_p2(25 downto 25);
    isneg_3_not_fu_591_p2 <= (isneg_3_fu_553_p3 xor ap_const_lv1_1);
    isneg_4_fu_880_p3 <= p_Val2_18_fu_874_p2(27 downto 27);
    isneg_fu_267_p3 <= p_Val2_1_fu_261_p2(18 downto 18);
    newsignbit_0_not_i_i_fu_940_p2 <= (newsignbit_4_fu_898_p3 xor ap_const_lv1_1);
    newsignbit_1_fu_397_p3 <= p_Val2_3_fu_379_p2(24 downto 24);
    newsignbit_2_fu_481_p3 <= p_Val2_5_fu_463_p2(24 downto 24);
    newsignbit_3_fu_565_p3 <= p_Val2_7_fu_547_p2(24 downto 24);
    newsignbit_4_fu_898_p3 <= p_Val2_19_fu_893_p2(24 downto 24);
    newsignbit_fu_281_p3 <= p_Val2_2_fu_275_p2(17 downto 17);
    overflow_fu_934_p2 <= (tmp_20_i_fu_928_p2 and brmerge_i_i9_fu_922_p2);
    p_0_fu_838_p3 <= 
        ap_const_lv18_C800 when (sel_tmp2_reg_1061(0) = '1') else 
        sel_tmp4_fu_831_p3;
        p_Val2_10_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_fu_731_p2),26));

    p_Val2_10_fu_731_p2 <= (tmp_6_i_cast_fu_723_p3 and Ia_V);
    p_Val2_11_fu_755_p2 <= (tmp_i_cast_fu_747_p3 and Ib_V);
    p_Val2_11_mux_i_fu_978_p3 <= 
        ap_const_lv25_FFFFFF when (brmerge_i_i_i_fu_964_p2(0) = '1') else 
        p_Val2_19_reg_1106;
    p_Val2_12_fu_789_p2 <= (tmp_7_i_cast_fu_781_p3 and Ib_V);
    p_Val2_13_fu_775_p2 <= std_logic_vector(signed(tmp_3_i_cast_fu_761_p1) + signed(tmp_5_i_cast_fu_765_p1));
    p_Val2_13_mux_fu_319_p3 <= 
        ap_const_lv18_1FFFF when (brmerge_i_i_fu_307_p2(0) = '1') else 
        p_Val2_2_fu_275_p2;
        p_Val2_14_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_reg_1086),28));

    p_Val2_14_fu_856_p2 <= (tmp_12_i_cast_fu_849_p3 and Ic_V);
    p_Val2_15_fu_799_p2 <= std_logic_vector(unsigned(p_Val2_13_fu_775_p2) + unsigned(tmp_9_i_cast_cast_fu_795_p1));
    p_Val2_16_fu_813_p2 <= (tmp_15_i_cast_fu_805_p3 and Ic_V);
    p_Val2_16_mux_fu_435_p3 <= 
        ap_const_lv25_FFFFFF when (brmerge_i_i1_fu_417_p2(0) = '1') else 
        p_Val2_4_fu_393_p1;
    p_Val2_17_fu_865_p2 <= std_logic_vector(signed(p_Val2_14_cast_fu_846_p1) + signed(tmp_14_i_cast_fu_861_p1));
    p_Val2_18_fu_874_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_865_p2) + unsigned(tmp_17_i_cast_cast_fu_871_p1));
    p_Val2_19_fu_893_p2 <= std_logic_vector(unsigned(tmp9_reg_1096) + unsigned(tmp7_fu_888_p2));
    p_Val2_19_mux_fu_519_p3 <= 
        ap_const_lv25_FFFFFF when (brmerge_i_i2_fu_501_p2(0) = '1') else 
        p_Val2_6_fu_477_p1;
    p_Val2_1_7_fu_443_p3 <= 
        ap_const_lv25_1000000 when (underflow_1_fu_411_p2(0) = '1') else 
        p_Val2_4_fu_393_p1;
    p_Val2_1_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv19_40) + unsigned(tmp_cast_fu_257_p1));
    p_Val2_22_mux_fu_603_p3 <= 
        ap_const_lv25_FFFFFF when (brmerge_i_i3_fu_585_p2(0) = '1') else 
        p_Val2_8_fu_561_p1;
    p_Val2_2_8_fu_527_p3 <= 
        ap_const_lv25_1000000 when (underflow_2_fu_495_p2(0) = '1') else 
        p_Val2_6_fu_477_p1;
    p_Val2_2_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv18_40) + unsigned(counter_V));
    p_Val2_3_9_fu_611_p3 <= 
        ap_const_lv25_1000000 when (underflow_3_fu_579_p2(0) = '1') else 
        p_Val2_8_fu_561_p1;
    p_Val2_3_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(OP1_V_fu_375_p1));
    p_Val2_4_fu_393_p1 <= p_Val2_3_fu_379_p2(25 - 1 downto 0);
    p_Val2_5_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(OP1_V_1_fu_459_p1));
    p_Val2_6_fu_477_p1 <= p_Val2_5_fu_463_p2(25 - 1 downto 0);
    p_Val2_7_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(OP1_V_2_fu_543_p1));
    p_Val2_8_fu_561_p1 <= p_Val2_7_fu_547_p2(25 - 1 downto 0);
        p_Val2_9_cast_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_fu_713_p2),26));

    p_Val2_9_fu_713_p2 <= (tmp_4_i_cast_fu_705_p3 and Ia_V);
    p_Val2_i_fu_985_p3 <= 
        ap_const_lv25_1000000 when (underflow_4_reg_1118(0) = '1') else 
        p_Val2_19_reg_1106;
    p_Val2_s_6_fu_327_p3 <= 
        ap_const_lv18_0 when (tmp_fu_251_p2(0) = '1') else 
        ap_const_lv18_20000;
    p_not38_i_i_fu_946_p2 <= "0" when (tmp_6_fu_906_p4 = ap_const_lv3_7) else "1";
    p_not_i_i_fu_916_p2 <= "0" when (tmp_6_fu_906_p4 = ap_const_lv3_0) else "1";
    sel_tmp1_fu_349_p2 <= (tmp_fu_251_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_355_p2 <= (underflow_not_fu_313_p2 and sel_tmp1_fu_349_p2);
    sel_tmp4_fu_831_p3 <= 
        Vdc_V when (tmp_reg_1056(0) = '1') else 
        ap_const_lv18_C800;
    sel_tmp_fu_341_p3 <= 
        p_Val2_s_6_fu_327_p3 when (tmp_3_fu_335_p2(0) = '1') else 
        p_Val2_2_fu_275_p2;
    storemerge_fu_361_p3 <= 
        p_Val2_13_mux_fu_319_p3 when (sel_tmp2_fu_355_p2(0) = '1') else 
        sel_tmp_fu_341_p3;
    this_assign_1_1_fu_535_p3 <= 
        p_Val2_19_mux_fu_519_p3 when (brmerge6_fu_513_p2(0) = '1') else 
        p_Val2_2_8_fu_527_p3;
    this_assign_2_1_fu_619_p3 <= 
        p_Val2_22_mux_fu_603_p3 when (brmerge7_fu_597_p2(0) = '1') else 
        p_Val2_3_9_fu_611_p3;
    this_assign_s_fu_451_p3 <= 
        p_Val2_16_mux_fu_435_p3 when (brmerge5_fu_429_p2(0) = '1') else 
        p_Val2_1_7_fu_443_p3;
    tmp7_fu_888_p2 <= std_logic_vector(unsigned(p_Val2_12_reg_1081) + unsigned(p_Val2_14_fu_856_p2));
    tmp8_fu_819_p2 <= std_logic_vector(unsigned(p_Val2_11_fu_755_p2) + unsigned(p_Val2_16_fu_813_p2));
    tmp9_fu_825_p2 <= std_logic_vector(unsigned(tmp8_fu_819_p2) + unsigned(tmp_5_fu_769_p2));
    tmp_12_i_cast_fu_849_p0 <= (0=>T3, others=>'-');
    tmp_12_i_cast_fu_849_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_12_i_cast_fu_849_p0(0) = '1') else 
        ap_const_lv25_0;
        tmp_14_i_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_856_p2),28));

    tmp_15_i_cast_fu_805_p3 <= 
        ap_const_lv25_1FFFFFF when (i_op_assign_2_fu_699_p2(0) = '1') else 
        ap_const_lv25_0;
        tmp_17_i_cast_cast_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_reg_1091),28));

    tmp_19_fu_639_p3 <= Ia_V(24 downto 24);
    tmp_1_fu_289_p2 <= (isneg_fu_267_p3 xor ap_const_lv1_1);
    tmp_20_fu_665_p3 <= Ib_V(24 downto 24);
    tmp_20_i_fu_928_p2 <= (isneg_4_fu_880_p3 xor ap_const_lv1_1);
    tmp_21_fu_691_p3 <= Ic_V(24 downto 24);
    tmp_21_i_fu_991_p3 <= 
        p_Val2_11_mux_i_fu_978_p3 when (brmerge4_i_fu_973_p2(0) = '1') else 
        p_Val2_i_fu_985_p3;
    tmp_2_fu_295_p2 <= (newsignbit_fu_281_p3 xor ap_const_lv1_1);
    tmp_3_fu_335_p2 <= (underflow_fu_301_p2 or tmp_fu_251_p2);
        tmp_3_i_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addconv_i_fu_741_p2),27));

    tmp_4_fu_405_p2 <= (newsignbit_1_fu_397_p3 xor ap_const_lv1_1);
    tmp_4_i_cast_fu_705_p0 <= (0=>T1, others=>'-');
    tmp_4_i_cast_fu_705_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_4_i_cast_fu_705_p0(0) = '1') else 
        ap_const_lv25_0;
    tmp_5_fu_769_p2 <= std_logic_vector(unsigned(p_Val2_10_fu_731_p2) + unsigned(p_Val2_9_fu_713_p2));
        tmp_5_i_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_755_p2),27));

    tmp_6_fu_906_p4 <= p_Val2_18_fu_874_p2(27 downto 25);
    tmp_6_i_cast_fu_723_p3 <= 
        ap_const_lv25_1FFFFFF when (i_op_assign_fu_647_p2(0) = '1') else 
        ap_const_lv25_0;
    tmp_7_fu_489_p2 <= (newsignbit_2_fu_481_p3 xor ap_const_lv1_1);
    tmp_7_i_cast_fu_781_p3 <= 
        ap_const_lv25_1FFFFFF when (i_op_assign_1_fu_673_p2(0) = '1') else 
        ap_const_lv25_0;
        tmp_9_i_cast_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_789_p2),27));

        tmp_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(counter_V),19));

    tmp_fu_251_p2 <= "1" when (signed(counter_V) > signed(ap_const_lv18_280)) else "0";
    tmp_i_cast_fu_747_p0 <= (0=>T2, others=>'-');
    tmp_i_cast_fu_747_p3 <= 
        ap_const_lv25_1FFFFFF when (tmp_i_cast_fu_747_p0(0) = '1') else 
        ap_const_lv25_0;
    tmp_s_fu_573_p2 <= (newsignbit_3_fu_565_p3 xor ap_const_lv1_1);
    underflow_1_fu_411_p2 <= (tmp_4_fu_405_p2 and isneg_1_fu_385_p3);
    underflow_2_fu_495_p2 <= (tmp_7_fu_489_p2 and isneg_2_fu_469_p3);
    underflow_3_fu_579_p2 <= (tmp_s_fu_573_p2 and isneg_3_fu_553_p3);
    underflow_4_fu_958_p2 <= (isneg_4_fu_880_p3 and brmerge39_i_i_fu_952_p2);
    underflow_fu_301_p2 <= (tmp_2_fu_295_p2 and isneg_fu_267_p3);
    underflow_not_fu_313_p2 <= (tmp_1_fu_289_p2 or newsignbit_fu_281_p3);
    underflow_not_i_fu_968_p2 <= (underflow_4_reg_1118 xor ap_const_lv1_1);
end behav;
