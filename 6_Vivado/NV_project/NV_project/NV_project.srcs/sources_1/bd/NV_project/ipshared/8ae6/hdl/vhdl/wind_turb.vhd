-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wind_turb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Tem_V : IN STD_LOGIC_VECTOR (26 downto 0);
    Pi_V : IN STD_LOGIC_VECTOR (20 downto 0);
    Wn_V : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of wind_turb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "wind_turb,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.344188,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=718,HLS_SYN_LUT=1535}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_A000 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001010000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_A000 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001010000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv30_1FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "011111111111111111111111111111";
    constant ap_const_lv30_20000000 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv25_FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "0111111111111111111111111";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv43_53E : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010100111110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iV_V : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    signal isneg_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_157_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_2_reg_849 : STD_LOGIC_VECTOR (29 downto 0);
    signal newsignbit_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal signbit_1_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_1_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_fu_303_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_11_reg_878 : STD_LOGIC_VECTOR (24 downto 0);
    signal newsignbit_3_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_3_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_480_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_21_reg_912 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal overflow_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_610_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_reg_930 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal p_Val2_5_fu_619_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_5_reg_935 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_25_fu_625_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_reg_941 : STD_LOGIC_VECTOR (23 downto 0);
    signal signbit_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_26_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_711_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_8_reg_961 : STD_LOGIC_VECTOR (29 downto 0);
    signal newsignbit_2_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_823_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_17_fu_463_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal Wn_V_preg : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_139_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_1_fu_143_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_mux_fu_195_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_3_fu_202_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_9_fu_209_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_fu_261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_1_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_10_fu_243_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_fu_299_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_32_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_337_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i1_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_demorgan_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_not_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_mux_fu_449_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_1_11_fu_456_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_492_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal newsignbit_1_fu_484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_8_fu_550_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal brmerge1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_mux_fu_571_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_6_fu_579_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_4_fu_586_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_598_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_11_cast_fu_606_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_594_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_5_fu_619_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_629_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_13_cast_fu_636_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_14_cast_fu_640_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_6_9_fu_643_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_27_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_i_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_657_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_707_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_not_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_not_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_mux_fu_809_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_s_10_fu_816_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_229_ap_start : STD_LOGIC;
    signal grp_fu_229_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component wind_turb_sdiv_33bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    wind_turb_sdiv_33bkb_U1 : component wind_turb_sdiv_33bkb
    generic map (
        ID => 1,
        NUM_STAGE => 37,
        din0_WIDTH => 33,
        din1_WIDTH => 30,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_229_ap_start,
        done => grp_fu_229_ap_done,
        din0 => grp_fu_229_p0,
        din1 => p_Val2_9_fu_209_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);





    Wn_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                Wn_V_preg <= ap_const_lv25_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    Wn_V_preg <= tmp_17_fu_463_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Range1_all_ones_1_reg_895 <= Range1_all_ones_1_fu_347_p2;
                Range1_all_zeros_reg_901 <= Range1_all_zeros_fu_353_p2;
                brmerge40_demorgan_i_reg_906 <= brmerge40_demorgan_i_fu_379_p2;
                carry_1_reg_889 <= carry_1_fu_323_p2;
                newsignbit_3_reg_884 <= p_Val2_11_fu_303_p2(24 downto 24);
                p_Val2_11_reg_878 <= p_Val2_11_fu_303_p2;
                signbit_1_reg_872 <= p_Val2_9_fu_209_p3(29 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                iV_V <= tmp_12_fu_823_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                isneg_reg_842 <= p_Val2_1_fu_143_p2(30 downto 30);
                newsignbit_reg_855 <= p_Val2_2_fu_157_p2(29 downto 29);
                p_Val2_2_reg_849 <= p_Val2_2_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                newsignbit_2_reg_967 <= p_Val2_8_fu_711_p2(29 downto 29);
                p_Val2_8_reg_961 <= p_Val2_8_fu_711_p2;
                signbit_reg_946 <= p_Val2_6_9_fu_643_p2(55 downto 55);
                tmp_26_reg_955 <= p_Val2_6_9_fu_643_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                overflow_reg_917 <= overflow_fu_520_p2;
                tmp_21_reg_912 <= tmp_21_fu_480_p1;
                underflow_1_reg_923 <= underflow_1_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                p_Val2_5_reg_935 <= p_Val2_5_fu_619_p2;
                tmp_25_reg_941 <= tmp_25_fu_625_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                r_V_reg_930 <= r_V_fu_610_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_1_fu_347_p2 <= "1" when (p_Result_7_fu_337_p4 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_353_p2 <= "1" when (p_Result_7_fu_337_p4 = ap_const_lv2_0) else "0";

    Wn_V_assign_proc : process(tmp_17_fu_463_p3, Wn_V_preg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Wn_V <= tmp_17_fu_463_p3;
        else 
            Wn_V <= Wn_V_preg;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);

    ap_done_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge1_fu_566_p2 <= (underflow_1_not_fu_561_p2 or overflow_reg_917);
    brmerge39_i_fu_538_p2 <= (p_not38_i_fu_532_p2 or newsignbit_0_not_i_fu_526_p2);
    brmerge40_demorgan_i_1_fu_777_p2 <= (signbit_reg_946 and newsignbit_2_reg_967);
    brmerge40_demorgan_i_fu_379_p2 <= (newsignbit_3_fu_309_p3 and deleted_ones_1_fu_371_p3);
    brmerge_fu_190_p2 <= (newsignbit_reg_855 or isneg_not_fu_185_p2);
    brmerge_i1_fu_508_p2 <= (p_not_i_fu_502_p2 or newsignbit_1_fu_484_p3);
    brmerge_i2_fu_400_p2 <= (p_not_i1_fu_394_p2 or newsignbit_3_reg_884);
    brmerge_i_i1_fu_557_p2 <= (underflow_1_reg_923 or overflow_reg_917);
    brmerge_i_i2_fu_766_p2 <= (p_not_i_i_fu_760_p2 or newsignbit_2_reg_967);
    brmerge_i_i3_fu_432_p2 <= (underflow_3_fu_427_p2 or overflow_2_fu_410_p2);
    brmerge_i_i_fu_181_p2 <= (newsignbit_reg_855 xor isneg_reg_842);
    brmerge_i_i_i_fu_792_p2 <= (underflow_2_fu_787_p2 or overflow_1_fu_771_p2);
    carry_1_fu_323_p2 <= (tmp_32_fu_271_p3 and tmp_14_fu_317_p2);
    carry_fu_730_p2 <= (tmp_26_reg_955 and tmp_10_fu_725_p2);
    deleted_ones_1_fu_371_p3 <= 
        p_41_i_fu_365_p2 when (carry_1_fu_323_p2(0) = '1') else 
        Range1_all_ones_1_fu_347_p2;
    deleted_zeros_1_fu_385_p3 <= 
        Range1_all_ones_1_reg_895 when (carry_1_reg_889(0) = '1') else 
        Range1_all_zeros_reg_901;
    deleted_zeros_fu_745_p2 <= (signbit_reg_946 xor not_carry_fu_740_p2);

    grp_fu_229_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_229_ap_start <= ap_const_logic_1;
        else 
            grp_fu_229_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_229_p0 <= (Pi_V & ap_const_lv12_0);
    isneg_1_fu_472_p3 <= grp_fu_229_p2(32 downto 32);
    isneg_not_fu_185_p2 <= (isneg_reg_842 xor ap_const_lv1_1);
    newsignbit_0_not_i_fu_526_p2 <= (newsignbit_1_fu_484_p3 xor ap_const_lv1_1);
    newsignbit_1_fu_484_p3 <= grp_fu_229_p2(18 downto 18);
    newsignbit_3_fu_309_p3 <= p_Val2_11_fu_303_p2(24 downto 24);
    not_carry_fu_740_p2 <= (p_Result_1_not_fu_735_p2 or newsignbit_2_reg_967);
    overflow_1_fu_771_p2 <= (tmp_11_fu_750_p2 and brmerge_i_i2_fu_766_p2);
    overflow_2_fu_410_p2 <= (tmp_16_fu_405_p2 and brmerge_i2_fu_400_p2);
    overflow_fu_520_p2 <= (tmp_7_fu_514_p2 and brmerge_i1_fu_508_p2);
    p_38_i_fu_390_p2 <= (carry_1_reg_889 and Range1_all_ones_1_reg_895);
    p_38_i_i_fu_755_p2 <= (signbit_reg_946 and carry_fu_730_p2);
    p_41_i_fu_365_p2 <= (tmp_15_fu_359_p2 and signbit_1_fu_235_p3);
    p_Result_1_not_fu_735_p2 <= (tmp_26_reg_955 xor ap_const_lv1_1);
    p_Result_7_fu_337_p4 <= p_Val2_9_fu_209_p3(29 downto 28);
    p_Val2_10_fu_243_p4 <= p_Val2_9_fu_209_p3(27 downto 3);
    p_Val2_11_fu_303_p2 <= std_logic_vector(unsigned(p_Val2_10_fu_243_p4) + unsigned(tmp_13_fu_299_p1));
    p_Val2_12_mux_fu_809_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i_i_fu_792_p2(0) = '1') else 
        p_Val2_8_reg_961;
    p_Val2_15_mux_fu_449_p3 <= 
        ap_const_lv25_FFFFFF when (brmerge_i_i3_fu_432_p2(0) = '1') else 
        p_Val2_11_reg_878;
    p_Val2_1_11_fu_456_p3 <= 
        ap_const_lv25_1000000 when (underflow_3_fu_427_p2(0) = '1') else 
        p_Val2_11_reg_878;
    p_Val2_1_fu_143_p2 <= std_logic_vector(unsigned(ap_const_lv31_A000) + unsigned(tmp_3_fu_139_p1));
    p_Val2_2_fu_157_p2 <= std_logic_vector(unsigned(ap_const_lv30_A000) + unsigned(iV_V));
    p_Val2_3_8_fu_550_p3 <= (tmp_21_reg_912 & ap_const_lv11_0);
    p_Val2_3_fu_202_p3 <= 
        ap_const_lv30_20000000 when (underflow_fu_176_p2(0) = '1') else 
        p_Val2_2_reg_849;
    p_Val2_3_mux_fu_195_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i_fu_181_p2(0) = '1') else 
        p_Val2_2_reg_849;
    p_Val2_4_fu_586_p3 <= 
        p_Val2_6_mux_fu_571_p3 when (brmerge1_fu_566_p2(0) = '1') else 
        p_Val2_6_fu_579_p3;
    p_Val2_5_fu_619_p1 <= r_V_reg_930;
    p_Val2_5_fu_619_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv43_53E) * signed(p_Val2_5_fu_619_p1))), 43));
    p_Val2_6_9_fu_643_p2 <= std_logic_vector(signed(tmp_13_cast_fu_636_p1) + signed(tmp_14_cast_fu_640_p1));
    p_Val2_6_fu_579_p3 <= 
        ap_const_lv30_20000000 when (underflow_1_reg_923(0) = '1') else 
        p_Val2_3_8_fu_550_p3;
    p_Val2_6_mux_fu_571_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i1_fu_557_p2(0) = '1') else 
        p_Val2_3_8_fu_550_p3;
    p_Val2_7_fu_657_p4 <= p_Val2_6_9_fu_643_p2(54 downto 25);
    p_Val2_8_fu_711_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_657_p4) + unsigned(tmp_5_fu_707_p1));
    p_Val2_9_fu_209_p3 <= 
        p_Val2_3_mux_fu_195_p3 when (brmerge_fu_190_p2(0) = '1') else 
        p_Val2_3_fu_202_p3;
    p_Val2_s_10_fu_816_p3 <= 
        ap_const_lv30_20000000 when (underflow_2_fu_787_p2(0) = '1') else 
        p_Val2_8_reg_961;
    p_not38_i_fu_532_p2 <= "0" when (tmp_fu_492_p4 = ap_const_lv14_3FFF) else "1";
    p_not_i1_fu_394_p2 <= (deleted_zeros_1_fu_385_p3 xor ap_const_lv1_1);
    p_not_i_fu_502_p2 <= "0" when (tmp_fu_492_p4 = ap_const_lv14_0) else "1";
    p_not_i_i_fu_760_p2 <= (deleted_zeros_fu_745_p2 xor ap_const_lv1_1);
    qb_assign_1_fu_701_p2 <= (r_i_i_i_fu_695_p2 and qbit_fu_667_p3);
    qb_assign_3_fu_293_p2 <= (r_i_i_fu_287_p2 and qbit_1_fu_253_p3);
    qbit_1_fu_253_p3 <= p_Val2_9_fu_209_p3(2 downto 2);
    qbit_fu_667_p3 <= p_Val2_5_reg_935(24 downto 24);
    r_1_fu_265_p2 <= "0" when (tmp_31_fu_261_p1 = ap_const_lv2_0) else "1";
    r_V_fu_610_p2 <= std_logic_vector(signed(tmp_11_cast_fu_606_p1) + signed(tmp_9_fu_594_p1));
    r_fu_674_p2 <= "0" when (tmp_25_reg_941 = ap_const_lv24_0) else "1";
    r_i_i_fu_287_p2 <= (tmp_33_fu_279_p3 or r_1_fu_265_p2);
    r_i_i_i_fu_695_p2 <= (tmp_27_fu_687_p3 or r_fu_674_p2);
    signbit_1_fu_235_p3 <= p_Val2_9_fu_209_p3(29 downto 29);
    tmp1_demorgan_fu_781_p2 <= (p_38_i_i_fu_755_p2 or brmerge40_demorgan_i_1_fu_777_p2);
    tmp2_fu_798_p2 <= (tmp_11_fu_750_p2 or newsignbit_2_reg_967);
    tmp3_demorgan_fu_416_p2 <= (p_38_i_fu_390_p2 or brmerge40_demorgan_i_reg_906);
    tmp3_fu_421_p2 <= (tmp3_demorgan_fu_416_p2 xor ap_const_lv1_1);
    tmp4_fu_438_p2 <= (tmp_16_fu_405_p2 or brmerge40_demorgan_i_reg_906);
    tmp_10_fu_725_p2 <= (newsignbit_2_reg_967 xor ap_const_lv1_1);
        tmp_11_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_598_p3),31));

    tmp_11_fu_750_p2 <= (signbit_reg_946 xor ap_const_lv1_1);
    tmp_12_fu_823_p3 <= 
        p_Val2_12_mux_fu_809_p3 when (underflow_2_not_fu_803_p2(0) = '1') else 
        p_Val2_s_10_fu_816_p3;
        tmp_13_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_629_p3),56));

    tmp_13_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_3_fu_293_p2),25));
        tmp_14_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_935),56));

    tmp_14_fu_317_p2 <= (newsignbit_3_fu_309_p3 xor ap_const_lv1_1);
    tmp_15_fu_359_p2 <= (tmp_35_fu_329_p3 xor ap_const_lv1_1);
    tmp_16_fu_405_p2 <= (signbit_1_reg_872 xor ap_const_lv1_1);
    tmp_17_fu_463_p3 <= 
        p_Val2_15_mux_fu_449_p3 when (underflow_3_not_fu_443_p2(0) = '1') else 
        p_Val2_1_11_fu_456_p3;
    tmp_21_fu_480_p1 <= grp_fu_229_p2(19 - 1 downto 0);
    tmp_25_fu_625_p1 <= p_Val2_5_fu_619_p2(24 - 1 downto 0);
    tmp_27_fu_687_p3 <= p_Val2_6_9_fu_643_p2(25 downto 25);
    tmp_31_fu_261_p1 <= p_Val2_9_fu_209_p3(2 - 1 downto 0);
    tmp_32_fu_271_p3 <= p_Val2_9_fu_209_p3(27 downto 27);
    tmp_33_fu_279_p3 <= p_Val2_9_fu_209_p3(3 downto 3);
    tmp_35_fu_329_p3 <= p_Val2_9_fu_209_p3(28 downto 28);
        tmp_3_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(iV_V),31));

    tmp_5_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_fu_701_p2),30));
    tmp_6_fu_171_p2 <= (newsignbit_reg_855 xor ap_const_lv1_1);
    tmp_7_fu_514_p2 <= (isneg_1_fu_472_p3 xor ap_const_lv1_1);
    tmp_8_fu_629_p3 <= (iV_V & ap_const_lv25_0);
        tmp_9_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_586_p3),31));

    tmp_fu_492_p4 <= grp_fu_229_p2(32 downto 19);
    tmp_s_fu_598_p3 <= (Tem_V & ap_const_lv3_0);
    underflow_1_fu_544_p2 <= (isneg_1_fu_472_p3 and brmerge39_i_fu_538_p2);
    underflow_1_not_fu_561_p2 <= (underflow_1_reg_923 xor ap_const_lv1_1);
    underflow_2_fu_787_p2 <= (tmp1_demorgan_fu_781_p2 xor signbit_reg_946);
    underflow_2_not_fu_803_p2 <= (tmp2_fu_798_p2 or p_38_i_i_fu_755_p2);
    underflow_3_fu_427_p2 <= (tmp3_fu_421_p2 and signbit_1_reg_872);
    underflow_3_not_fu_443_p2 <= (tmp4_fu_438_p2 or p_38_i_fu_390_p2);
    underflow_fu_176_p2 <= (tmp_6_fu_171_p2 and isneg_reg_842);
end behav;
