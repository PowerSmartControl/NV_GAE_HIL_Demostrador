-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCbus_dynamic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    I_in : IN STD_LOGIC_VECTOR (31 downto 0);
    I_out : IN STD_LOGIC_VECTOR (31 downto 0);
    t_step_C : IN STD_LOGIC_VECTOR (31 downto 0);
    ena_chop_res : IN STD_LOGIC;
    DC_bus_fixed_volt : IN STD_LOGIC;
    V_DC_voltage_in : IN STD_LOGIC_VECTOR (31 downto 0);
    V_bus : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DCbus_dynamic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DCbus_dynamic,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=1005,HLS_SYN_LUT=1680}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3C23D70A : STD_LOGIC_VECTOR (31 downto 0) := "00111100001000111101011100001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3ECCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111110110011001100110011001101";
    constant ap_const_lv32_3BA3D70A : STD_LOGIC_VECTOR (31 downto 0) := "00111011101000111101011100001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal V_bus_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal V_bus_1_vld_reg : STD_LOGIC := '0';
    signal V_bus_1_vld_in : STD_LOGIC;
    signal V_bus_1_ack_in : STD_LOGIC;
    signal V_bus_dc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal V_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal DC_bus_fixed_volt_re_read_fu_54_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal storemerge2_in_v_v_fu_158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_9_phi_fu_95_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal storemerge1_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal storemerge2_in_v_v_fu_158_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_114_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component DCbus_dynamic_fadbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCbus_dynamic_fadcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DCbus_dynamic_fmudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DCbus_dynamic_fadbkb_U1 : component DCbus_dynamic_fadbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        opcode => grp_fu_114_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_114_p2);

    DCbus_dynamic_fadcud_U2 : component DCbus_dynamic_fadcud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => V_C,
        din1 => tmp_7_reg_223,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    DCbus_dynamic_fmudEe_U3 : component DCbus_dynamic_fmudEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_124_p0,
        din1 => grp_fu_124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    DCbus_dynamic_fmudEe_U4 : component DCbus_dynamic_fmudEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_133,
        din1 => t_step_C,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    V_bus_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    V_bus_dc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                V_bus_dc <= reg_133;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                V_bus_dc <= V_DC_voltage_in;
            end if; 
        end if;
    end process;

    storemerge1_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                storemerge1_reg_103 <= ap_const_lv32_3F800000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                storemerge1_reg_103 <= tmp_8_reg_234;
            end if; 
        end if;
    end process;

    tmp_9_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                tmp_9_reg_91 <= V_DC_voltage_in;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
                tmp_9_reg_91 <= reg_133;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = V_bus_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                V_C <= storemerge1_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = V_bus_1_vld_reg) and (ap_const_logic_1 = V_bus_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_bus_1_vld_in) and (ap_const_logic_1 = V_bus_1_vld_reg)))) then
                V_bus_1_data_reg <= ap_phi_mux_tmp_9_phi_fu_95_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_133 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_141 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_7_reg_223 <= grp_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_8_reg_234 <= grp_fu_120_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, V_bus_1_ack_in, DC_bus_fixed_volt_re_read_fu_54_p2, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = DC_bus_fixed_volt_re_read_fu_54_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = V_bus_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DC_bus_fixed_volt_re_read_fu_54_p2 <= (0=>DC_bus_fixed_volt, others=>'-');
    V_bus <= V_bus_1_data_reg;

    V_bus_1_ack_in_assign_proc : process(V_bus_1_vld_reg)
    begin
        if (((ap_const_logic_0 = V_bus_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_bus_1_vld_reg)))) then 
            V_bus_1_ack_in <= ap_const_logic_1;
        else 
            V_bus_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    V_bus_1_vld_in_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            V_bus_1_vld_in <= ap_const_logic_1;
        else 
            V_bus_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(V_bus_1_ack_in, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = V_bus_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_9_phi_fu_95_p4_assign_proc : process(reg_133, DC_bus_fixed_volt_re_read_fu_54_p2, tmp_9_reg_91, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2))) then 
            ap_phi_mux_tmp_9_phi_fu_95_p4 <= reg_133;
        else 
            ap_phi_mux_tmp_9_phi_fu_95_p4 <= tmp_9_reg_91;
        end if; 
    end process;


    ap_ready_assign_proc : process(V_bus_1_ack_in, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = V_bus_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_114_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, DC_bus_fixed_volt_re_read_fu_54_p2, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_0 = DC_bus_fixed_volt_re_read_fu_54_p2)))) then 
            grp_fu_114_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_114_opcode <= ap_const_lv2_0;
        else 
            grp_fu_114_opcode <= "XX";
        end if; 
    end process;


    grp_fu_114_p0_assign_proc : process(ap_CS_fsm_state1, I_in, reg_133, reg_141, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_114_p0 <= reg_141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_114_p0 <= reg_133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_114_p0 <= I_in;
        else 
            grp_fu_114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p1_assign_proc : process(ap_CS_fsm_state1, I_out, V_C, reg_141, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_114_p1 <= V_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_114_p1 <= reg_141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_114_p1 <= I_out;
        else 
            grp_fu_114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p0_assign_proc : process(V_bus_dc, reg_133, ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_124_p0 <= reg_133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_124_p0 <= V_bus_dc;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p1_assign_proc : process(ap_CS_fsm_state2, storemerge2_in_v_v_fu_158_p3, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_124_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_124_p1 <= storemerge2_in_v_v_fu_158_p3;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    storemerge2_in_v_v_fu_158_p0 <= (0=>ena_chop_res, others=>'-');
    storemerge2_in_v_v_fu_158_p3 <= 
        ap_const_lv32_3ECCCCCD when (storemerge2_in_v_v_fu_158_p0(0) = '1') else 
        ap_const_lv32_3BA3D70A;
end behav;
