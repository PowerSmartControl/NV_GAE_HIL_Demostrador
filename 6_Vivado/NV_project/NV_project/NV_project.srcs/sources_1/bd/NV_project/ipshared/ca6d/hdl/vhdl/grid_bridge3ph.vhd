-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity grid_bridge3ph is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    T1 : IN STD_LOGIC;
    T2 : IN STD_LOGIC;
    T3 : IN STD_LOGIC;
    T4 : IN STD_LOGIC;
    T5 : IN STD_LOGIC;
    T6 : IN STD_LOGIC;
    Vdc : IN STD_LOGIC_VECTOR (31 downto 0);
    Ia : IN STD_LOGIC_VECTOR (31 downto 0);
    Ib : IN STD_LOGIC_VECTOR (31 downto 0);
    Ic : IN STD_LOGIC_VECTOR (31 downto 0);
    Va_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Vb_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Vc_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Idc_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_n_gnd_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of grid_bridge3ph is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "grid_bridge3ph,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.626000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=1648,HLS_SYN_LUT=3176}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3EAAAAAB : STD_LOGIC_VECTOR (31 downto 0) := "00111110101010101010101010101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Va_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Va_r_1_vld_reg : STD_LOGIC := '0';
    signal Va_r_1_vld_in : STD_LOGIC;
    signal Va_r_1_ack_in : STD_LOGIC;
    signal Vb_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vb_r_1_vld_reg : STD_LOGIC := '0';
    signal Vb_r_1_vld_in : STD_LOGIC;
    signal Vb_r_1_ack_in : STD_LOGIC;
    signal Vc_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vc_r_1_vld_reg : STD_LOGIC := '0';
    signal Vc_r_1_vld_in : STD_LOGIC;
    signal Vc_r_1_ack_in : STD_LOGIC;
    signal Idc_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Idc_r_1_vld_reg : STD_LOGIC := '0';
    signal Idc_r_1_vld_in : STD_LOGIC;
    signal Idc_r_1_ack_in : STD_LOGIC;
    signal V_n_gnd_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal V_n_gnd_r_1_vld_reg : STD_LOGIC := '0';
    signal V_n_gnd_r_1_vld_in : STD_LOGIC;
    signal V_n_gnd_r_1_ack_in : STD_LOGIC;
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_T1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T1_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T2_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Vdc_assign_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vdc_assign_1_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_T3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T3_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal Vdc_assign_2_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal brmerge_fu_215_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_215_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ia_to_int_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_231_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_241_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_not_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T1_fu_275_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_281_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ib_to_int_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_297_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_307_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge10_not_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T2_fu_341_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_373_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_373_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ic_to_int_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_399_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge13_not_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_T3_fu_433_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component grid_bridge3ph_fabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_bridge3ph_fmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_bridge3ph_sidEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grid_bridge3ph_fceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grid_bridge3ph_fabkb_U1 : component grid_bridge3ph_fabkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    grid_bridge3ph_fmcud_U2 : component grid_bridge3ph_fmcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    grid_bridge3ph_fmcud_U3 : component grid_bridge3ph_fmcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_7_reg_517,
        din1 => Ib,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    grid_bridge3ph_sidEe_U4 : component grid_bridge3ph_sidEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_178_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p1);

    grid_bridge3ph_sidEe_U5 : component grid_bridge3ph_sidEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_181_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p1);

    grid_bridge3ph_fceOg_U6 : component grid_bridge3ph_fceOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_184_p0,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => grp_fu_184_p2);

    grid_bridge3ph_fceOg_U7 : component grid_bridge3ph_fceOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => Ib,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_21_fu_190_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Idc_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    V_n_gnd_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Va_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Vb_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Vc_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Idc_r_1_vld_reg) and (ap_const_logic_1 = Idc_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Idc_r_1_vld_in) and (ap_const_logic_1 = Idc_r_1_vld_reg)))) then
                Idc_r_1_data_reg <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = V_n_gnd_r_1_vld_reg) and (ap_const_logic_1 = V_n_gnd_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_n_gnd_r_1_vld_in) and (ap_const_logic_1 = V_n_gnd_r_1_vld_reg)))) then
                V_n_gnd_r_1_data_reg <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Va_r_1_vld_reg) and (ap_const_logic_1 = Va_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Va_r_1_vld_in) and (ap_const_logic_1 = Va_r_1_vld_reg)))) then
                Va_r_1_data_reg <= Vdc_assign_fu_347_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Vb_r_1_vld_reg) and (ap_const_logic_1 = Vb_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vb_r_1_vld_in) and (ap_const_logic_1 = Vb_r_1_vld_reg)))) then
                Vb_r_1_data_reg <= Vdc_assign_1_fu_356_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Vc_r_1_vld_reg) and (ap_const_logic_1 = Vc_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vc_r_1_vld_in) and (ap_const_logic_1 = Vc_r_1_vld_reg)))) then
                Vc_r_1_data_reg <= Vdc_assign_2_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_T1_reg_461 <= p_T1_fu_275_p2;
                p_T2_reg_467 <= p_T2_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_T3_reg_505 <= p_T3_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_197 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_204 <= grp_fu_178_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_209 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_7_reg_517 <= grp_fu_181_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_8_reg_527 <= grp_fu_172_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, Va_r_1_ack_in, Vb_r_1_ack_in, Vc_r_1_ack_in, Idc_r_1_ack_in, V_n_gnd_r_1_ack_in, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if ((not(((ap_const_logic_0 = Vb_r_1_ack_in) or (ap_const_logic_0 = Va_r_1_ack_in) or (ap_const_logic_0 = V_n_gnd_r_1_ack_in) or (ap_const_logic_0 = Idc_r_1_ack_in) or (ap_const_logic_0 = Vc_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ia_to_int_fu_227_p1 <= Ia;
    Ib_to_int_fu_293_p1 <= Ib;
    Ic_to_int_fu_385_p1 <= Ic;
    Idc_r <= Idc_r_1_data_reg;

    Idc_r_1_ack_in_assign_proc : process(Idc_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Idc_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Idc_r_1_vld_reg)))) then 
            Idc_r_1_ack_in <= ap_const_logic_1;
        else 
            Idc_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Idc_r_1_vld_in_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Idc_r_1_vld_in <= ap_const_logic_1;
        else 
            Idc_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    V_n_gnd_r <= V_n_gnd_r_1_data_reg;

    V_n_gnd_r_1_ack_in_assign_proc : process(V_n_gnd_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = V_n_gnd_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = V_n_gnd_r_1_vld_reg)))) then 
            V_n_gnd_r_1_ack_in <= ap_const_logic_1;
        else 
            V_n_gnd_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    V_n_gnd_r_1_vld_in_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            V_n_gnd_r_1_vld_in <= ap_const_logic_1;
        else 
            V_n_gnd_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Va_r <= Va_r_1_data_reg;

    Va_r_1_ack_in_assign_proc : process(Va_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Va_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Va_r_1_vld_reg)))) then 
            Va_r_1_ack_in <= ap_const_logic_1;
        else 
            Va_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Va_r_1_vld_in_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Va_r_1_vld_in <= ap_const_logic_1;
        else 
            Va_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Vb_r <= Vb_r_1_data_reg;

    Vb_r_1_ack_in_assign_proc : process(Vb_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vb_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vb_r_1_vld_reg)))) then 
            Vb_r_1_ack_in <= ap_const_logic_1;
        else 
            Vb_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vb_r_1_vld_in_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Vb_r_1_vld_in <= ap_const_logic_1;
        else 
            Vb_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Vc_r <= Vc_r_1_data_reg;

    Vc_r_1_ack_in_assign_proc : process(Vc_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vc_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vc_r_1_vld_reg)))) then 
            Vc_r_1_ack_in <= ap_const_logic_1;
        else 
            Vc_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vc_r_1_vld_in_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Vc_r_1_vld_in <= ap_const_logic_1;
        else 
            Vc_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Vdc_assign_1_fu_356_p3 <= 
        Vdc when (p_T2_reg_467(0) = '1') else 
        ap_const_lv32_0;
    Vdc_assign_2_fu_439_p3 <= 
        Vdc when (p_T3_reg_505(0) = '1') else 
        ap_const_lv32_0;
    Vdc_assign_fu_347_p3 <= 
        Vdc when (p_T1_reg_461(0) = '1') else 
        ap_const_lv32_0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state22_assign_proc : process(Va_r_1_ack_in, Vb_r_1_ack_in, Vc_r_1_ack_in, Idc_r_1_ack_in, V_n_gnd_r_1_ack_in)
    begin
                ap_block_state22 <= ((ap_const_logic_0 = Vb_r_1_ack_in) or (ap_const_logic_0 = Va_r_1_ack_in) or (ap_const_logic_0 = V_n_gnd_r_1_ack_in) or (ap_const_logic_0 = Idc_r_1_ack_in) or (ap_const_logic_0 = Vc_r_1_ack_in));
    end process;


    ap_done_assign_proc : process(Va_r_1_ack_in, Vb_r_1_ack_in, Vc_r_1_ack_in, Idc_r_1_ack_in, V_n_gnd_r_1_ack_in, ap_CS_fsm_state22)
    begin
        if ((not(((ap_const_logic_0 = Vb_r_1_ack_in) or (ap_const_logic_0 = Va_r_1_ack_in) or (ap_const_logic_0 = V_n_gnd_r_1_ack_in) or (ap_const_logic_0 = Idc_r_1_ack_in) or (ap_const_logic_0 = Vc_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(Va_r_1_ack_in, Vb_r_1_ack_in, Vc_r_1_ack_in, Idc_r_1_ack_in, V_n_gnd_r_1_ack_in, ap_CS_fsm_state22)
    begin
        if ((not(((ap_const_logic_0 = Vb_r_1_ack_in) or (ap_const_logic_0 = Va_r_1_ack_in) or (ap_const_logic_0 = V_n_gnd_r_1_ack_in) or (ap_const_logic_0 = Idc_r_1_ack_in) or (ap_const_logic_0 = Vc_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge10_not_fu_287_p2 <= (brmerge1_fu_281_p2 xor ap_const_lv1_1);
    brmerge13_not_fu_379_p2 <= (brmerge2_fu_373_p2 xor ap_const_lv1_1);
    brmerge1_fu_281_p0 <= (0=>T2, others=>'-');
    brmerge1_fu_281_p1 <= (0=>T5, others=>'-');
    brmerge1_fu_281_p2 <= (brmerge1_fu_281_p1 or brmerge1_fu_281_p0);
    brmerge2_fu_373_p0 <= (0=>T3, others=>'-');
    brmerge2_fu_373_p1 <= (0=>T6, others=>'-');
    brmerge2_fu_373_p2 <= (brmerge2_fu_373_p1 or brmerge2_fu_373_p0);
    brmerge_fu_215_p0 <= (0=>T1, others=>'-');
    brmerge_fu_215_p1 <= (0=>T4, others=>'-');
    brmerge_fu_215_p2 <= (brmerge_fu_215_p1 or brmerge_fu_215_p0);
    brmerge_not_fu_221_p2 <= (brmerge_fu_215_p2 xor ap_const_lv1_1);

    grp_fu_163_p0_assign_proc : process(reg_197, ap_CS_fsm_state7, ap_CS_fsm_state12, reg_209, ap_CS_fsm_state2, Vdc_assign_fu_347_p3, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_163_p0 <= reg_209;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_163_p0 <= reg_197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_163_p0 <= Vdc_assign_fu_347_p3;
        else 
            grp_fu_163_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_163_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, reg_209, ap_CS_fsm_state2, Vdc_assign_1_fu_356_p3, Vdc_assign_2_fu_439_p3, tmp_8_reg_527, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_163_p1 <= reg_209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_163_p1 <= tmp_8_reg_527;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_163_p1 <= Vdc_assign_2_fu_439_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_163_p1 <= Vdc_assign_1_fu_356_p3;
        else 
            grp_fu_163_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(reg_197, reg_204, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_168_p0 <= reg_197;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_168_p0 <= reg_204;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p1_assign_proc : process(Ia, Ic, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_168_p1 <= Ic;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_168_p1 <= ap_const_lv32_3EAAAAAB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_168_p1 <= Ia;
        else 
            grp_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state2, tmp_3_fu_365_p1, tmp_s_fu_447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_178_p0 <= tmp_s_fu_447_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_178_p0 <= tmp_3_fu_365_p1;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_181_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_T2_reg_467),32));

    grp_fu_184_p0_assign_proc : process(ap_CS_fsm_state1, Ia, Ic, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p0 <= Ic;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_184_p0 <= Ia;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    notlhs3_fu_311_p2 <= "0" when (tmp_18_fu_297_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_403_p2 <= "0" when (tmp_23_fu_389_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_245_p2 <= "0" when (tmp_fu_231_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_317_p2 <= "1" when (tmp_19_fu_307_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_409_p2 <= "1" when (tmp_24_fu_399_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_251_p2 <= "1" when (tmp_1_fu_241_p1 = ap_const_lv23_0) else "0";
    or_cond1_fu_335_p2 <= (tmp_22_fu_329_p2 and brmerge10_not_fu_287_p2);
    or_cond2_fu_427_p2 <= (tmp_27_fu_421_p2 and brmerge13_not_fu_379_p2);
    or_cond_fu_269_p2 <= (tmp_17_fu_263_p2 and brmerge_not_fu_221_p2);
    p_T1_fu_275_p1 <= (0=>T1, others=>'-');
    p_T1_fu_275_p2 <= (p_T1_fu_275_p1 or or_cond_fu_269_p2);
    p_T2_fu_341_p1 <= (0=>T2, others=>'-');
    p_T2_fu_341_p2 <= (p_T2_fu_341_p1 or or_cond1_fu_335_p2);
    p_T3_fu_433_p1 <= (0=>T3, others=>'-');
    p_T3_fu_433_p2 <= (p_T3_fu_433_p1 or or_cond2_fu_427_p2);
    tmp_17_fu_263_p2 <= (tmp_2_fu_257_p2 and grp_fu_184_p2);
    tmp_18_fu_297_p4 <= Ib_to_int_fu_293_p1(30 downto 23);
    tmp_19_fu_307_p1 <= Ib_to_int_fu_293_p1(23 - 1 downto 0);
    tmp_1_fu_241_p1 <= Ia_to_int_fu_227_p1(23 - 1 downto 0);
    tmp_20_fu_323_p2 <= (notrhs4_fu_317_p2 or notlhs3_fu_311_p2);
    tmp_22_fu_329_p2 <= (tmp_21_fu_190_p2 and tmp_20_fu_323_p2);
    tmp_23_fu_389_p4 <= Ic_to_int_fu_385_p1(30 downto 23);
    tmp_24_fu_399_p1 <= Ic_to_int_fu_385_p1(23 - 1 downto 0);
    tmp_25_fu_415_p2 <= (notrhs6_fu_409_p2 or notlhs5_fu_403_p2);
    tmp_27_fu_421_p2 <= (tmp_25_fu_415_p2 and grp_fu_184_p2);
    tmp_2_fu_257_p2 <= (notrhs_fu_251_p2 or notlhs_fu_245_p2);
    tmp_3_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_T1_reg_461),32));
    tmp_fu_231_p4 <= Ia_to_int_fu_227_p1(30 downto 23);
    tmp_s_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_T3_reg_505),32));
end behav;
