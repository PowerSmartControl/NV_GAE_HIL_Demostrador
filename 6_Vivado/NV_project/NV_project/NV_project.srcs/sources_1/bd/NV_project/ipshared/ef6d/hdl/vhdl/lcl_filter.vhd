-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lcl_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V1_a : IN STD_LOGIC_VECTOR (31 downto 0);
    V1_b : IN STD_LOGIC_VECTOR (31 downto 0);
    V1_c : IN STD_LOGIC_VECTOR (31 downto 0);
    V2_a_s : IN STD_LOGIC_VECTOR (31 downto 0);
    V2_b_s : IN STD_LOGIC_VECTOR (31 downto 0);
    V2_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
    VN_gnd : IN STD_LOGIC_VECTOR (31 downto 0);
    dT_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dT_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    dT_C : IN STD_LOGIC_VECTOR (31 downto 0);
    rC : IN STD_LOGIC_VECTOR (31 downto 0);
    rL1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rL2 : IN STD_LOGIC_VECTOR (31 downto 0);
    Preload : IN STD_LOGIC_VECTOR (31 downto 0);
    CB1_K1_K3_V : IN STD_LOGIC_VECTOR (4 downto 0);
    IL1_a_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    IL1_b_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    IL1_c_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    IL2_a_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    IL2_b_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    IL2_c_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Vp_a_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Vp_b_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    Vp_c_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lcl_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lcl_filter,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=36,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=30,HLS_SYN_FF=3834,HLS_SYN_LUT=5673}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_3C23D70A : STD_LOGIC_VECTOR (31 downto 0) := "00111100001000111101011100001010";
    constant ap_const_lv32_3F7D70A4 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011111010111000010100100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_41400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_459C4000 : STD_LOGIC_VECTOR (31 downto 0) := "01000101100111000100000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IL1_a_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL1_a_r_1_vld_reg : STD_LOGIC := '0';
    signal IL1_a_r_1_vld_in : STD_LOGIC;
    signal IL1_a_r_1_ack_in : STD_LOGIC;
    signal IL1_b_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL1_b_r_1_vld_reg : STD_LOGIC := '0';
    signal IL1_b_r_1_vld_in : STD_LOGIC;
    signal IL1_b_r_1_ack_in : STD_LOGIC;
    signal IL1_c_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL1_c_r_1_vld_reg : STD_LOGIC := '0';
    signal IL1_c_r_1_vld_in : STD_LOGIC;
    signal IL1_c_r_1_ack_in : STD_LOGIC;
    signal IL2_a_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL2_a_r_1_vld_reg : STD_LOGIC := '0';
    signal IL2_a_r_1_vld_in : STD_LOGIC;
    signal IL2_a_r_1_ack_in : STD_LOGIC;
    signal IL2_b_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL2_b_r_1_vld_reg : STD_LOGIC := '0';
    signal IL2_b_r_1_vld_in : STD_LOGIC;
    signal IL2_b_r_1_ack_in : STD_LOGIC;
    signal IL2_c_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IL2_c_r_1_vld_reg : STD_LOGIC := '0';
    signal IL2_c_r_1_vld_in : STD_LOGIC;
    signal IL2_c_r_1_ack_in : STD_LOGIC;
    signal Vp_a_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_a_r_1_vld_reg : STD_LOGIC := '0';
    signal Vp_a_r_1_vld_in : STD_LOGIC;
    signal Vp_a_r_1_ack_in : STD_LOGIC;
    signal Vp_b_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_b_r_1_vld_reg : STD_LOGIC := '0';
    signal Vp_b_r_1_vld_in : STD_LOGIC;
    signal Vp_b_r_1_ack_in : STD_LOGIC;
    signal Vp_c_r_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_c_r_1_vld_reg : STD_LOGIC := '0';
    signal Vp_c_r_1_vld_in : STD_LOGIC;
    signal Vp_c_r_1_ack_in : STD_LOGIC;
    signal I_L1_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L1_b : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L1_c : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_b : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_c : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_b : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Vp_c : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal VC_a : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal VC_b : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal VC_c : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_a_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_b_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal I_L2_c_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal switch_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal switch_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal storemerge_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_12_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_54_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_56_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal I_L2_a_new_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal I_L2_b_new_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal I_L2_c_new_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Preload_assign_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_to_int_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_601_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_65_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_315_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_321_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_330_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_334_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_338_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_state42 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component lcl_filter_faddfsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lcl_filter_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lcl_filter_fcmp_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lcl_filter_faddfsbkb_U1 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        opcode => grp_fu_309_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    lcl_filter_faddfsbkb_U2 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        opcode => grp_fu_315_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    lcl_filter_faddfsbkb_U3 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        opcode => grp_fu_321_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_321_p2);

    lcl_filter_faddfsbkb_U4 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        opcode => grp_fu_330_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    lcl_filter_faddfsbkb_U5 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_334_p0,
        din1 => grp_fu_334_p1,
        opcode => grp_fu_334_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_334_p2);

    lcl_filter_faddfsbkb_U6 : component lcl_filter_faddfsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_338_p0,
        din1 => grp_fu_338_p1,
        opcode => grp_fu_338_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p2);

    lcl_filter_fmul_3cud_U7 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    lcl_filter_fmul_3cud_U8 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    lcl_filter_fmul_3cud_U9 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_355_p2);

    lcl_filter_fmul_3cud_U10 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    lcl_filter_fmul_3cud_U11 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    lcl_filter_fmul_3cud_U12 : component lcl_filter_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    lcl_filter_fcmp_3dEe_U13 : component lcl_filter_fcmp_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => storemerge_fu_540_p3,
        din1 => ap_const_lv32_41400000,
        opcode => ap_const_lv5_2,
        dout => tmp_66_fu_390_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    IL1_a_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    IL1_b_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    IL1_c_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    IL2_a_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    IL2_b_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    IL2_c_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    I_L2_a_new_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_reg_882 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                I_L2_a_new_reg_273 <= reg_458;
            elsif (((tmp_67_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                I_L2_a_new_reg_273 <= tmp_54_reg_977;
            end if; 
        end if;
    end process;

    I_L2_b_new_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_reg_882 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                I_L2_b_new_reg_285 <= reg_466;
            elsif (((tmp_67_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                I_L2_b_new_reg_285 <= tmp_56_reg_983;
            end if; 
        end if;
    end process;

    I_L2_c_new_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_reg_882 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                I_L2_c_new_reg_297 <= reg_474;
            elsif (((tmp_67_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                I_L2_c_new_reg_297 <= tmp_58_reg_989;
            end if; 
        end if;
    end process;

    Vp_a_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Vp_b_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Vp_c_r_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL1_a_r_1_vld_reg) and (ap_const_logic_1 = IL1_a_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_a_r_1_vld_in) and (ap_const_logic_1 = IL1_a_r_1_vld_reg)))) then
                IL1_a_r_1_data_reg <= reg_482;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL1_b_r_1_vld_reg) and (ap_const_logic_1 = IL1_b_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_b_r_1_vld_in) and (ap_const_logic_1 = IL1_b_r_1_vld_reg)))) then
                IL1_b_r_1_data_reg <= reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL1_c_r_1_vld_reg) and (ap_const_logic_1 = IL1_c_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_c_r_1_vld_in) and (ap_const_logic_1 = IL1_c_r_1_vld_reg)))) then
                IL1_c_r_1_data_reg <= reg_496;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL2_a_r_1_vld_reg) and (ap_const_logic_1 = IL2_a_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_a_r_1_vld_in) and (ap_const_logic_1 = IL2_a_r_1_vld_reg)))) then
                IL2_a_r_1_data_reg <= I_L2_a_new_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL2_b_r_1_vld_reg) and (ap_const_logic_1 = IL2_b_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_b_r_1_vld_in) and (ap_const_logic_1 = IL2_b_r_1_vld_reg)))) then
                IL2_b_r_1_data_reg <= I_L2_b_new_reg_285;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = IL2_c_r_1_vld_reg) and (ap_const_logic_1 = IL2_c_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_c_r_1_vld_in) and (ap_const_logic_1 = IL2_c_r_1_vld_reg)))) then
                IL2_c_r_1_data_reg <= I_L2_c_new_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                I_L1_a <= grp_fu_309_p2;
                I_L1_b <= grp_fu_315_p2;
                I_L1_c <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                I_L2_a <= I_L2_a_new_reg_273;
                I_L2_b <= I_L2_b_new_reg_285;
                I_L2_c <= I_L2_c_new_reg_297;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                I_L2_a_prev <= grp_fu_345_p2;
                I_L2_b_prev <= grp_fu_350_p2;
                I_L2_c_prev <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                VC_a <= grp_fu_330_p2;
                VC_b <= grp_fu_334_p2;
                VC_c <= grp_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                Vp_a <= grp_fu_309_p2;
                Vp_b <= grp_fu_315_p2;
                Vp_c <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Vp_a_r_1_vld_reg) and (ap_const_logic_1 = Vp_a_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_a_r_1_vld_in) and (ap_const_logic_1 = Vp_a_r_1_vld_reg)))) then
                Vp_a_r_1_data_reg <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Vp_b_r_1_vld_reg) and (ap_const_logic_1 = Vp_b_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_b_r_1_vld_in) and (ap_const_logic_1 = Vp_b_r_1_vld_reg)))) then
                Vp_b_r_1_data_reg <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Vp_c_r_1_vld_reg) and (ap_const_logic_1 = Vp_c_r_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_c_r_1_vld_in) and (ap_const_logic_1 = Vp_c_r_1_vld_reg)))) then
                Vp_c_r_1_data_reg <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                notlhs_reg_867 <= notlhs_fu_605_p2;
                notrhs_reg_872 <= notrhs_fu_611_p2;
                tmp_66_reg_877 <= tmp_66_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_395 <= grp_fu_309_p2;
                reg_403 <= grp_fu_315_p2;
                reg_411 <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_419 <= grp_fu_345_p2;
                reg_426 <= grp_fu_350_p2;
                reg_433 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_440 <= grp_fu_360_p2;
                reg_446 <= grp_fu_364_p2;
                reg_452 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_458 <= grp_fu_330_p2;
                reg_466 <= grp_fu_334_p2;
                reg_474 <= grp_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_482 <= grp_fu_309_p2;
                reg_489 <= grp_fu_315_p2;
                reg_496 <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                switch_reg_786 <= switch_fu_503_p2;
                tmp_5_reg_791 <= tmp_5_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_12_reg_937 <= grp_fu_350_p2;
                tmp_15_reg_942 <= grp_fu_355_p2;
                tmp_19_reg_947 <= grp_fu_360_p2;
                tmp_23_reg_952 <= grp_fu_364_p2;
                tmp_27_reg_957 <= grp_fu_368_p2;
                tmp_4_reg_932 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_54_reg_977 <= grp_fu_309_p2;
                tmp_56_reg_983 <= grp_fu_315_p2;
                tmp_58_reg_989 <= grp_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_67_reg_882 <= tmp_67_fu_621_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, IL1_a_r_1_ack_in, IL1_b_r_1_ack_in, IL1_c_r_1_ack_in, IL2_a_r_1_ack_in, IL2_b_r_1_ack_in, IL2_c_r_1_ack_in, Vp_a_r_1_ack_in, Vp_b_r_1_ack_in, Vp_c_r_1_ack_in, ap_CS_fsm_state25, tmp_67_reg_882, ap_CS_fsm_state42)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((tmp_67_reg_882 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if ((not(((ap_const_logic_0 = IL1_a_r_1_ack_in) or (ap_const_logic_0 = Vp_c_r_1_ack_in) or (ap_const_logic_0 = Vp_b_r_1_ack_in) or (ap_const_logic_0 = Vp_a_r_1_ack_in) or (ap_const_logic_0 = IL2_c_r_1_ack_in) or (ap_const_logic_0 = IL2_b_r_1_ack_in) or (ap_const_logic_0 = IL2_a_r_1_ack_in) or (ap_const_logic_0 = IL1_c_r_1_ack_in) or (ap_const_logic_0 = IL1_b_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IL1_a_r <= IL1_a_r_1_data_reg;

    IL1_a_r_1_ack_in_assign_proc : process(IL1_a_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL1_a_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_a_r_1_vld_reg)))) then 
            IL1_a_r_1_ack_in <= ap_const_logic_1;
        else 
            IL1_a_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL1_a_r_1_vld_in_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IL1_a_r_1_vld_in <= ap_const_logic_1;
        else 
            IL1_a_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    IL1_b_r <= IL1_b_r_1_data_reg;

    IL1_b_r_1_ack_in_assign_proc : process(IL1_b_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL1_b_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_b_r_1_vld_reg)))) then 
            IL1_b_r_1_ack_in <= ap_const_logic_1;
        else 
            IL1_b_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL1_b_r_1_vld_in_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IL1_b_r_1_vld_in <= ap_const_logic_1;
        else 
            IL1_b_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    IL1_c_r <= IL1_c_r_1_data_reg;

    IL1_c_r_1_ack_in_assign_proc : process(IL1_c_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL1_c_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL1_c_r_1_vld_reg)))) then 
            IL1_c_r_1_ack_in <= ap_const_logic_1;
        else 
            IL1_c_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL1_c_r_1_vld_in_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IL1_c_r_1_vld_in <= ap_const_logic_1;
        else 
            IL1_c_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    IL2_a_r <= IL2_a_r_1_data_reg;

    IL2_a_r_1_ack_in_assign_proc : process(IL2_a_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL2_a_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_a_r_1_vld_reg)))) then 
            IL2_a_r_1_ack_in <= ap_const_logic_1;
        else 
            IL2_a_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL2_a_r_1_vld_in_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            IL2_a_r_1_vld_in <= ap_const_logic_1;
        else 
            IL2_a_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    IL2_b_r <= IL2_b_r_1_data_reg;

    IL2_b_r_1_ack_in_assign_proc : process(IL2_b_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL2_b_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_b_r_1_vld_reg)))) then 
            IL2_b_r_1_ack_in <= ap_const_logic_1;
        else 
            IL2_b_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL2_b_r_1_vld_in_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            IL2_b_r_1_vld_in <= ap_const_logic_1;
        else 
            IL2_b_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    IL2_c_r <= IL2_c_r_1_data_reg;

    IL2_c_r_1_ack_in_assign_proc : process(IL2_c_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = IL2_c_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = IL2_c_r_1_vld_reg)))) then 
            IL2_c_r_1_ack_in <= ap_const_logic_1;
        else 
            IL2_c_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    IL2_c_r_1_vld_in_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            IL2_c_r_1_vld_in <= ap_const_logic_1;
        else 
            IL2_c_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Preload_assign_fu_533_p3 <= 
        Preload when (tmp_5_reg_791(0) = '1') else 
        rL2;
    Vp_a_r <= Vp_a_r_1_data_reg;

    Vp_a_r_1_ack_in_assign_proc : process(Vp_a_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vp_a_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_a_r_1_vld_reg)))) then 
            Vp_a_r_1_ack_in <= ap_const_logic_1;
        else 
            Vp_a_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vp_a_r_1_vld_in_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            Vp_a_r_1_vld_in <= ap_const_logic_1;
        else 
            Vp_a_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Vp_b_r <= Vp_b_r_1_data_reg;

    Vp_b_r_1_ack_in_assign_proc : process(Vp_b_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vp_b_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_b_r_1_vld_reg)))) then 
            Vp_b_r_1_ack_in <= ap_const_logic_1;
        else 
            Vp_b_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vp_b_r_1_vld_in_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            Vp_b_r_1_vld_in <= ap_const_logic_1;
        else 
            Vp_b_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Vp_c_r <= Vp_c_r_1_data_reg;

    Vp_c_r_1_ack_in_assign_proc : process(Vp_c_r_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Vp_c_r_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Vp_c_r_1_vld_reg)))) then 
            Vp_c_r_1_ack_in <= ap_const_logic_1;
        else 
            Vp_c_r_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Vp_c_r_1_vld_in_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            Vp_c_r_1_vld_in <= ap_const_logic_1;
        else 
            Vp_c_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state42_assign_proc : process(IL1_a_r_1_ack_in, IL1_b_r_1_ack_in, IL1_c_r_1_ack_in, IL2_a_r_1_ack_in, IL2_b_r_1_ack_in, IL2_c_r_1_ack_in, Vp_a_r_1_ack_in, Vp_b_r_1_ack_in, Vp_c_r_1_ack_in)
    begin
                ap_block_state42 <= ((ap_const_logic_0 = IL1_a_r_1_ack_in) or (ap_const_logic_0 = Vp_c_r_1_ack_in) or (ap_const_logic_0 = Vp_b_r_1_ack_in) or (ap_const_logic_0 = Vp_a_r_1_ack_in) or (ap_const_logic_0 = IL2_c_r_1_ack_in) or (ap_const_logic_0 = IL2_b_r_1_ack_in) or (ap_const_logic_0 = IL2_a_r_1_ack_in) or (ap_const_logic_0 = IL1_c_r_1_ack_in) or (ap_const_logic_0 = IL1_b_r_1_ack_in));
    end process;


    ap_done_assign_proc : process(IL1_a_r_1_ack_in, IL1_b_r_1_ack_in, IL1_c_r_1_ack_in, IL2_a_r_1_ack_in, IL2_b_r_1_ack_in, IL2_c_r_1_ack_in, Vp_a_r_1_ack_in, Vp_b_r_1_ack_in, Vp_c_r_1_ack_in, ap_CS_fsm_state42)
    begin
        if ((not(((ap_const_logic_0 = IL1_a_r_1_ack_in) or (ap_const_logic_0 = Vp_c_r_1_ack_in) or (ap_const_logic_0 = Vp_b_r_1_ack_in) or (ap_const_logic_0 = Vp_a_r_1_ack_in) or (ap_const_logic_0 = IL2_c_r_1_ack_in) or (ap_const_logic_0 = IL2_b_r_1_ack_in) or (ap_const_logic_0 = IL2_a_r_1_ack_in) or (ap_const_logic_0 = IL1_c_r_1_ack_in) or (ap_const_logic_0 = IL1_b_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(IL1_a_r_1_ack_in, IL1_b_r_1_ack_in, IL1_c_r_1_ack_in, IL2_a_r_1_ack_in, IL2_b_r_1_ack_in, IL2_c_r_1_ack_in, Vp_a_r_1_ack_in, Vp_b_r_1_ack_in, Vp_c_r_1_ack_in, ap_CS_fsm_state42)
    begin
        if ((not(((ap_const_logic_0 = IL1_a_r_1_ack_in) or (ap_const_logic_0 = Vp_c_r_1_ack_in) or (ap_const_logic_0 = Vp_b_r_1_ack_in) or (ap_const_logic_0 = Vp_a_r_1_ack_in) or (ap_const_logic_0 = IL2_c_r_1_ack_in) or (ap_const_logic_0 = IL2_b_r_1_ack_in) or (ap_const_logic_0 = IL2_a_r_1_ack_in) or (ap_const_logic_0 = IL1_c_r_1_ack_in) or (ap_const_logic_0 = IL1_b_r_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_309_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_309_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_309_opcode <= ap_const_lv2_0;
        else 
            grp_fu_309_opcode <= "XX";
        end if; 
    end process;


    grp_fu_309_p0_assign_proc : process(ap_CS_fsm_state1, V1_a, V2_a_s, I_L1_a, reg_395, ap_CS_fsm_state20, reg_419, reg_440, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_309_p0 <= reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_309_p0 <= reg_440;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_309_p0 <= reg_395;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_309_p0 <= I_L1_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_309_p0 <= V1_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_309_p0 <= V2_a_s;
        else 
            grp_fu_309_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_309_p1_assign_proc : process(ap_CS_fsm_state1, VN_gnd, I_L2_a, Vp_a, VC_a, I_L2_a_prev, ap_CS_fsm_state20, reg_419, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, tmp_4_reg_932, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_309_p1 <= I_L2_a_prev;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_309_p1 <= tmp_4_reg_932;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_309_p1 <= VC_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_309_p1 <= reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_309_p1 <= I_L2_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_309_p1 <= Vp_a;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_309_p1 <= VN_gnd;
        else 
            grp_fu_309_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_315_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_315_opcode <= ap_const_lv2_0;
        else 
            grp_fu_315_opcode <= "XX";
        end if; 
    end process;


    grp_fu_315_p0_assign_proc : process(ap_CS_fsm_state1, V1_b, V2_b_s, I_L1_b, ap_CS_fsm_state20, reg_403, reg_426, reg_446, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_315_p0 <= reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_315_p0 <= reg_446;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_315_p0 <= reg_403;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_315_p0 <= I_L1_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_315_p0 <= V1_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_315_p0 <= V2_b_s;
        else 
            grp_fu_315_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_315_p1_assign_proc : process(ap_CS_fsm_state1, VN_gnd, I_L2_b, Vp_b, VC_b, I_L2_b_prev, ap_CS_fsm_state20, reg_426, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, tmp_12_reg_937, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_315_p1 <= I_L2_b_prev;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_315_p1 <= tmp_12_reg_937;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_315_p1 <= VC_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_315_p1 <= reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_315_p1 <= I_L2_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_315_p1 <= Vp_b;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_315_p1 <= VN_gnd;
        else 
            grp_fu_315_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_321_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_321_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_321_opcode <= ap_const_lv2_0;
        else 
            grp_fu_321_opcode <= "XX";
        end if; 
    end process;


    grp_fu_321_p0_assign_proc : process(ap_CS_fsm_state1, V1_c, V2_c_s, I_L1_c, ap_CS_fsm_state20, reg_411, reg_433, reg_452, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_321_p0 <= reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_321_p0 <= reg_452;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_321_p0 <= reg_411;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_321_p0 <= I_L1_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_321_p0 <= V1_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_321_p0 <= V2_c_s;
        else 
            grp_fu_321_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_321_p1_assign_proc : process(ap_CS_fsm_state1, VN_gnd, I_L2_c, Vp_c, VC_c, I_L2_c_prev, ap_CS_fsm_state20, reg_433, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state16, tmp_15_reg_942, ap_CS_fsm_state29, ap_CS_fsm_state37, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_321_p1 <= I_L2_c_prev;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_321_p1 <= tmp_15_reg_942;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_321_p1 <= VC_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_321_p1 <= reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_321_p1 <= I_L2_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_321_p1 <= Vp_c;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_321_p1 <= VN_gnd;
        else 
            grp_fu_321_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_330_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_330_opcode <= ap_const_lv2_0;
        else 
            grp_fu_330_opcode <= "XX";
        end if; 
    end process;


    grp_fu_330_p0_assign_proc : process(I_L2_a, Vp_a, VC_a, ap_CS_fsm_state20, reg_458, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_330_p0 <= I_L2_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_330_p0 <= VC_a;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_330_p0 <= reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_330_p0 <= Vp_a;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_p1_assign_proc : process(reg_395, ap_CS_fsm_state20, reg_419, reg_440, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16, tmp_19_reg_947)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_330_p1 <= tmp_19_reg_947;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_330_p1 <= reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_330_p1 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_330_p1 <= reg_395;
        else 
            grp_fu_330_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_334_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_334_opcode <= ap_const_lv2_0;
        else 
            grp_fu_334_opcode <= "XX";
        end if; 
    end process;


    grp_fu_334_p0_assign_proc : process(I_L2_b, Vp_b, VC_b, ap_CS_fsm_state20, reg_466, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_334_p0 <= I_L2_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_334_p0 <= VC_b;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_334_p0 <= reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_334_p0 <= Vp_b;
        else 
            grp_fu_334_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_p1_assign_proc : process(ap_CS_fsm_state20, reg_403, reg_426, reg_446, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16, tmp_23_reg_952)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_334_p1 <= tmp_23_reg_952;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_334_p1 <= reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_334_p1 <= reg_446;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_334_p1 <= reg_403;
        else 
            grp_fu_334_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_338_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_338_opcode <= ap_const_lv2_0;
        else 
            grp_fu_338_opcode <= "XX";
        end if; 
    end process;


    grp_fu_338_p0_assign_proc : process(I_L2_c, Vp_c, VC_c, ap_CS_fsm_state20, reg_474, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_338_p0 <= I_L2_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_338_p0 <= VC_c;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_338_p0 <= reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_338_p0 <= Vp_c;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(ap_CS_fsm_state20, reg_411, reg_433, reg_452, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state16, tmp_27_reg_957)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_338_p1 <= tmp_27_reg_957;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_338_p1 <= reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_338_p1 <= reg_452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_338_p1 <= reg_411;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p0_assign_proc : process(I_L1_a, reg_395, ap_CS_fsm_state25, reg_458, reg_482, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_54_reg_977, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_345_p0 <= tmp_54_reg_977;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_345_p0 <= reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_345_p0 <= reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_345_p0 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_345_p0 <= I_L1_a;
        else 
            grp_fu_345_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p1_assign_proc : process(dT_L1, dT_C, rL1, ap_CS_fsm_state25, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_345_p1 <= ap_const_lv32_3F7D70A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_345_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_345_p1 <= dT_L1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_345_p1 <= dT_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_345_p1 <= rL1;
        else 
            grp_fu_345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p0_assign_proc : process(I_L1_b, ap_CS_fsm_state25, reg_403, reg_466, reg_489, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_56_reg_983, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_350_p0 <= tmp_56_reg_983;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_350_p0 <= reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_350_p0 <= reg_403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_350_p0 <= reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_350_p0 <= I_L1_b;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(dT_L1, dT_C, rL1, ap_CS_fsm_state25, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_350_p1 <= ap_const_lv32_3F7D70A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_350_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_350_p1 <= dT_L1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_350_p1 <= dT_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_350_p1 <= rL1;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_355_p0_assign_proc : process(I_L1_c, ap_CS_fsm_state25, reg_411, reg_474, reg_496, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_58_reg_989, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_355_p0 <= tmp_58_reg_989;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_355_p0 <= reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_355_p0 <= reg_411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_355_p0 <= reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_355_p0 <= I_L1_c;
        else 
            grp_fu_355_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_355_p1_assign_proc : process(dT_L1, dT_C, rL1, ap_CS_fsm_state25, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_355_p1 <= ap_const_lv32_3F7D70A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_355_p1 <= ap_const_lv32_3C23D70A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_355_p1 <= dT_L1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_355_p1 <= dT_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_355_p1 <= rL1;
        else 
            grp_fu_355_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_p0_assign_proc : process(I_L2_a, reg_458, reg_482, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_360_p0 <= reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_360_p0 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_360_p0 <= I_L2_a;
        else 
            grp_fu_360_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_p1_assign_proc : process(dT_L2, rC, ap_CS_fsm_state7, storemerge_fu_540_p3, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_360_p1 <= dT_L2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_360_p1 <= rC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_360_p1 <= storemerge_fu_540_p3;
        else 
            grp_fu_360_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p0_assign_proc : process(I_L2_b, reg_466, reg_489, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_364_p0 <= reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_364_p0 <= reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_364_p0 <= I_L2_b;
        else 
            grp_fu_364_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p1_assign_proc : process(dT_L2, rC, ap_CS_fsm_state7, storemerge_fu_540_p3, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_364_p1 <= dT_L2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_364_p1 <= rC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_364_p1 <= storemerge_fu_540_p3;
        else 
            grp_fu_364_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_p0_assign_proc : process(I_L2_c, reg_474, reg_496, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_368_p0 <= reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_368_p0 <= reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_368_p0 <= I_L2_c;
        else 
            grp_fu_368_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_p1_assign_proc : process(dT_L2, rC, ap_CS_fsm_state7, storemerge_fu_540_p3, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_368_p1 <= dT_L2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_368_p1 <= rC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_368_p1 <= storemerge_fu_540_p3;
        else 
            grp_fu_368_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    notlhs_fu_605_p2 <= "0" when (tmp_fu_591_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_611_p2 <= "1" when (tmp_52_fu_601_p1 = ap_const_lv23_0) else "0";
    storemerge_fu_540_p3 <= 
        ap_const_lv32_459C4000 when (switch_reg_786(0) = '1') else 
        Preload_assign_fu_533_p3;
    storemerge_to_int_fu_587_p1 <= storemerge_fu_540_p3;
    switch_fu_503_p2 <= "1" when (unsigned(CB1_K1_K3_V) < unsigned(ap_const_lv5_5)) else "0";
    tmp_52_fu_601_p1 <= storemerge_to_int_fu_587_p1(23 - 1 downto 0);
    tmp_5_fu_509_p2 <= "1" when (CB1_K1_K3_V = ap_const_lv5_5) else "0";
    tmp_65_fu_617_p2 <= (notrhs_reg_872 or notlhs_reg_867);
    tmp_67_fu_621_p2 <= (tmp_66_reg_877 and tmp_65_fu_617_p2);
    tmp_fu_591_p4 <= storemerge_to_int_fu_587_p1(30 downto 23);
end behav;
